// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Hands.Data.HandsDB
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeHandsDBContext : IHandsDBContext
    {
        public System.Data.Entity.DbSet<AccessLevel> AccessLevels { get; set; }
        public System.Data.Entity.DbSet<ApiAuthentication> ApiAuthentications { get; set; }
        public System.Data.Entity.DbSet<ApiDuplicateRecordLog> ApiDuplicateRecordLogs { get; set; }
        public System.Data.Entity.DbSet<ApiErrorLog> ApiErrorLogs { get; set; }
        public System.Data.Entity.DbSet<ApiLog> ApiLogs { get; set; }
        public System.Data.Entity.DbSet<AppMenu> AppMenus { get; set; }
        public System.Data.Entity.DbSet<AppUser> AppUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<AssignMenuToApp> AssignMenuToApps { get; set; }
        public System.Data.Entity.DbSet<AssignMenuToProject> AssignMenuToProjects { get; set; }
        public System.Data.Entity.DbSet<AssignRoleToProject> AssignRoleToProjects { get; set; }
        public System.Data.Entity.DbSet<BlmisCategory> BlmisCategories { get; set; }
        public System.Data.Entity.DbSet<BlmisSellHistory> BlmisSellHistories { get; set; }
        public System.Data.Entity.DbSet<BlmisUserstock> BlmisUserstocks { get; set; }
        public System.Data.Entity.DbSet<Category> Categories { get; set; }
        public System.Data.Entity.DbSet<City> Cities { get; set; }
        public System.Data.Entity.DbSet<ClientChecklist> ClientChecklists { get; set; }
        public System.Data.Entity.DbSet<Content> Contents { get; set; }
        public System.Data.Entity.DbSet<CurrentMrwa20210923> CurrentMrwa20210923 { get; set; }
        public System.Data.Entity.DbSet<Device> Devices { get; set; }
        public System.Data.Entity.DbSet<InventoryReturn> InventoryReturns { get; set; }
        public System.Data.Entity.DbSet<LhvChecklist> LhvChecklists { get; set; }
        public System.Data.Entity.DbSet<Log> Logs { get; set; }
        public System.Data.Entity.DbSet<LogsHeader> LogsHeaders { get; set; }
        public System.Data.Entity.DbSet<MarviLhv> MarviLhvs { get; set; }
        public System.Data.Entity.DbSet<Menu> Menus { get; set; }
        public System.Data.Entity.DbSet<MenuLevelAccess> MenuLevelAccesses { get; set; }
        public System.Data.Entity.DbSet<MultiProjectAppDetail> MultiProjectAppDetails { get; set; }
        public System.Data.Entity.DbSet<Mwra> Mwras { get; set; }
        public System.Data.Entity.DbSet<MwraCategory> MwraCategories { get; set; }
        public System.Data.Entity.DbSet<MwraClient> MwraClients { get; set; }
        public System.Data.Entity.DbSet<MwraClientMapping> MwraClientMappings { get; set; }
        public System.Data.Entity.DbSet<MwraClientSnapshot102021> MwraClientSnapshot102021 { get; set; }
        public System.Data.Entity.DbSet<NoorChecklist> NoorChecklists { get; set; }
        public System.Data.Entity.DbSet<Pm> Pms { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<Products1> Products1 { get; set; }
        public System.Data.Entity.DbSet<ProjectMenuAccess> ProjectMenuAccesses { get; set; }
        public System.Data.Entity.DbSet<ProjectSolution> ProjectSolutions { get; set; }
        public System.Data.Entity.DbSet<PushEvent> PushEvents { get; set; }
        public System.Data.Entity.DbSet<PushMessage> PushMessages { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<RegionsMapping> RegionsMappings { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<RoleMenuAccess> RoleMenuAccesses { get; set; }
        public System.Data.Entity.DbSet<RoleMenuAccessLevelRight> RoleMenuAccessLevelRights { get; set; }
        public System.Data.Entity.DbSet<Session> Sessions { get; set; }
        public System.Data.Entity.DbSet<SessionContent> SessionContents { get; set; }
        public System.Data.Entity.DbSet<SessionFollowup> SessionFollowups { get; set; }
        public System.Data.Entity.DbSet<SessionInventory> SessionInventories { get; set; }
        public System.Data.Entity.DbSet<SessionMwra> SessionMwras { get; set; }
        public System.Data.Entity.DbSet<Stock> Stocks { get; set; }
        public System.Data.Entity.DbSet<Taluqa> Taluqas { get; set; }
        public System.Data.Entity.DbSet<TempLog> TempLogs { get; set; }
        public System.Data.Entity.DbSet<TempMwra> TempMwras { get; set; }
        public System.Data.Entity.DbSet<TestingTable> TestingTables { get; set; }
        public System.Data.Entity.DbSet<UnionCouncil> UnionCouncils { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserMenuAccess> UserMenuAccesses { get; set; }
        public System.Data.Entity.DbSet<UsersStock> UsersStocks { get; set; }
        public System.Data.Entity.DbSet<UserType> UserTypes { get; set; }

        public FakeHandsDBContext()
        {
            AccessLevels = new FakeDbSet<AccessLevel>("Id");
            ApiAuthentications = new FakeDbSet<ApiAuthentication>("AuthId");
            ApiDuplicateRecordLogs = new FakeDbSet<ApiDuplicateRecordLog>("Id");
            ApiErrorLogs = new FakeDbSet<ApiErrorLog>("Id");
            ApiLogs = new FakeDbSet<ApiLog>("Id");
            AppMenus = new FakeDbSet<AppMenu>("Id");
            AppUsers = new FakeDbSet<AppUser>("AppUserId");
            AspNetRoles = new FakeDbSet<AspNetRole>("Id");
            AspNetUsers = new FakeDbSet<AspNetUser>("Id");
            AspNetUserClaims = new FakeDbSet<AspNetUserClaim>("Id");
            AspNetUserLogins = new FakeDbSet<AspNetUserLogin>("LoginProvider", "ProviderKey", "UserId");
            AssignMenuToApps = new FakeDbSet<AssignMenuToApp>("Id");
            AssignMenuToProjects = new FakeDbSet<AssignMenuToProject>("Id");
            AssignRoleToProjects = new FakeDbSet<AssignRoleToProject>("Id");
            BlmisCategories = new FakeDbSet<BlmisCategory>("Id");
            BlmisSellHistories = new FakeDbSet<BlmisSellHistory>("Id");
            BlmisUserstocks = new FakeDbSet<BlmisUserstock>("Id");
            Categories = new FakeDbSet<Category>("CategoryId");
            Cities = new FakeDbSet<City>("CitiyId");
            ClientChecklists = new FakeDbSet<ClientChecklist>("ClientChecklistId");
            Contents = new FakeDbSet<Content>("ContentId");
            CurrentMrwa20210923 = new FakeDbSet<CurrentMrwa20210923>("MwraId");
            Devices = new FakeDbSet<Device>("Id");
            InventoryReturns = new FakeDbSet<InventoryReturn>("Id");
            LhvChecklists = new FakeDbSet<LhvChecklist>("LhvChecklistId");
            Logs = new FakeDbSet<Log>("LogId");
            LogsHeaders = new FakeDbSet<LogsHeader>("Id");
            MarviLhvs = new FakeDbSet<MarviLhv>("LhvName", "MarviName", "MarviId", "RegionId");
            Menus = new FakeDbSet<Menu>("Id");
            MenuLevelAccesses = new FakeDbSet<MenuLevelAccess>("Id");
            MultiProjectAppDetails = new FakeDbSet<MultiProjectAppDetail>("Id");
            Mwras = new FakeDbSet<Mwra>("MwraId");
            MwraCategories = new FakeDbSet<MwraCategory>("MwraId");
            MwraClients = new FakeDbSet<MwraClient>("MwraClientId");
            MwraClientMappings = new FakeDbSet<MwraClientMapping>("MwraClientId", "IsActive");
            MwraClientSnapshot102021 = new FakeDbSet<MwraClientSnapshot102021>("MwraClientId", "IsActive");
            NoorChecklists = new FakeDbSet<NoorChecklist>("NoorChecklistId");
            Pms = new FakeDbSet<Pm>("ContentId");
            Products = new FakeDbSet<Product>("ProductId");
            Products1 = new FakeDbSet<Products1>("ProductId");
            ProjectMenuAccesses = new FakeDbSet<ProjectMenuAccess>("Id");
            ProjectSolutions = new FakeDbSet<ProjectSolution>("Id");
            PushEvents = new FakeDbSet<PushEvent>("EventId");
            PushMessages = new FakeDbSet<PushMessage>("MessageId");
            Regions = new FakeDbSet<Region>("RegionsId");
            RegionsMappings = new FakeDbSet<RegionsMapping>("UnionCouncilId", "UnionCouncilName");
            Roles = new FakeDbSet<Role>("RoleId");
            RoleMenuAccesses = new FakeDbSet<RoleMenuAccess>("Id");
            RoleMenuAccessLevelRights = new FakeDbSet<RoleMenuAccessLevelRight>("Id");
            Sessions = new FakeDbSet<Session>("SessionId");
            SessionContents = new FakeDbSet<SessionContent>("Id");
            SessionFollowups = new FakeDbSet<SessionFollowup>("SessionFollowupId");
            SessionInventories = new FakeDbSet<SessionInventory>("Id");
            SessionMwras = new FakeDbSet<SessionMwra>("SessionMwraId");
            Stocks = new FakeDbSet<Stock>("StockId");
            Taluqas = new FakeDbSet<Taluqa>("TaluqaId");
            TempLogs = new FakeDbSet<TempLog>("LogId");
            TempMwras = new FakeDbSet<TempMwra>("TempMwraId");
            TestingTables = new FakeDbSet<TestingTable>("Id", "ParentId", "IsActive");
            UnionCouncils = new FakeDbSet<UnionCouncil>("UnionCouncilId");
            Users = new FakeDbSet<User>("UserId");
            UserMenuAccesses = new FakeDbSet<UserMenuAccess>("Id");
            UsersStocks = new FakeDbSet<UsersStock>("UsersStockId");
            UserTypes = new FakeDbSet<UserType>("UserTypeId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<AccessMenubyRoleIdReturnModel> AccessMenubyRoleId(int? roleId, int? projectId)
        {
            int procResult;
            return AccessMenubyRoleId(roleId, projectId, out procResult);
        }

        public System.Collections.Generic.List<AccessMenubyRoleIdReturnModel> AccessMenubyRoleId(int? roleId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AccessMenubyRoleIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AccessMenubyRoleIdReturnModel>> AccessMenubyRoleIdAsync(int? roleId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AccessMenubyRoleId(roleId, projectId, out procResult));
        }

        public System.Collections.Generic.List<ClmisInventoryStatusReturnModel> ClmisInventoryStatus(int? projectId)
        {
            int procResult;
            return ClmisInventoryStatus(projectId, out procResult);
        }

        public System.Collections.Generic.List<ClmisInventoryStatusReturnModel> ClmisInventoryStatus(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ClmisInventoryStatusReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClmisInventoryStatusReturnModel>> ClmisInventoryStatusAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ClmisInventoryStatus(projectId, out procResult));
        }

        public System.Collections.Generic.List<ClmisTotalMwraReturnModel> ClmisTotalMwra(int? projectId)
        {
            int procResult;
            return ClmisTotalMwra(projectId, out procResult);
        }

        public System.Collections.Generic.List<ClmisTotalMwraReturnModel> ClmisTotalMwra(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ClmisTotalMwraReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClmisTotalMwraReturnModel>> ClmisTotalMwraAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ClmisTotalMwra(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetAllContentReturnModel> GetAllContent(int? projectId)
        {
            int procResult;
            return GetAllContent(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAllContentReturnModel> GetAllContent(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllContentReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllContentReturnModel>> GetAllContentAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllContent(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetAllContentPmsReturnModel> GetAllContentPms(int? projectId)
        {
            int procResult;
            return GetAllContentPms(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAllContentPmsReturnModel> GetAllContentPms(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllContentPmsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllContentPmsReturnModel>> GetAllContentPmsAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllContentPms(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetAllLogwithMarviReturnModel> GetAllLogwithMarvi()
        {
            int procResult;
            return GetAllLogwithMarvi(out procResult);
        }

        public System.Collections.Generic.List<GetAllLogwithMarviReturnModel> GetAllLogwithMarvi(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllLogwithMarviReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllLogwithMarviReturnModel>> GetAllLogwithMarviAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllLogwithMarvi(out procResult));
        }

        public System.Collections.Generic.List<GetAllLogwithNameReturnModel> GetAllLogwithName(int? projectId)
        {
            int procResult;
            return GetAllLogwithName(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAllLogwithNameReturnModel> GetAllLogwithName(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllLogwithNameReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllLogwithNameReturnModel>> GetAllLogwithNameAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllLogwithName(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetAllMiscellenousReturnModel> GetAllMiscellenous()
        {
            int procResult;
            return GetAllMiscellenous(out procResult);
        }

        public System.Collections.Generic.List<GetAllMiscellenousReturnModel> GetAllMiscellenous(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllMiscellenousReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMiscellenousReturnModel>> GetAllMiscellenousAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllMiscellenous(out procResult));
        }

        public System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel> GetAllMwraClientWithRelationNames()
        {
            int procResult;
            return GetAllMwraClientWithRelationNames(out procResult);
        }

        public System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel> GetAllMwraClientWithRelationNames(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel>> GetAllMwraClientWithRelationNamesAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllMwraClientWithRelationNames(out procResult));
        }

        public System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel> GetAllMwrAsByAppUserId(int? appUserId)
        {
            int procResult;
            return GetAllMwrAsByAppUserId(appUserId, out procResult);
        }

        public System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel> GetAllMwrAsByAppUserId(int? appUserId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel>> GetAllMwrAsByAppUserIdAsync(int? appUserId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllMwrAsByAppUserId(appUserId, out procResult));
        }

        public System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel> GetAllMwraWithAllRelations()
        {
            int procResult;
            return GetAllMwraWithAllRelations(out procResult);
        }

        public System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel> GetAllMwraWithAllRelations(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel>> GetAllMwraWithAllRelationsAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllMwraWithAllRelations(out procResult));
        }

        public System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel> GetAllMwraWithRelationNames(int? projectId, int? lhvId, int? marviId)
        {
            int procResult;
            return GetAllMwraWithRelationNames(projectId, lhvId, marviId, out procResult);
        }

        public System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel> GetAllMwraWithRelationNames(int? projectId, int? lhvId, int? marviId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel>> GetAllMwraWithRelationNamesAsync(int? projectId, int? lhvId, int? marviId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllMwraWithRelationNames(projectId, lhvId, marviId, out procResult));
        }

        public System.Collections.Generic.List<GetAllProductsReturnModel> GetAllProducts()
        {
            int procResult;
            return GetAllProducts(out procResult);
        }

        public System.Collections.Generic.List<GetAllProductsReturnModel> GetAllProducts(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllProductsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllProductsReturnModel>> GetAllProductsAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllProducts(out procResult));
        }

        public System.Collections.Generic.List<GetAllSessionDataReturnModel> GetAllSessionData(int? appUserId, System.DateTime? startDate)
        {
            int procResult;
            return GetAllSessionData(appUserId, startDate, out procResult);
        }

        public System.Collections.Generic.List<GetAllSessionDataReturnModel> GetAllSessionData(int? appUserId, System.DateTime? startDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllSessionDataReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllSessionDataReturnModel>> GetAllSessionDataAsync(int? appUserId, System.DateTime? startDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllSessionData(appUserId, startDate, out procResult));
        }

        public System.Collections.Generic.List<GetAllSessionDataOldReturnModel> GetAllSessionDataOld()
        {
            int procResult;
            return GetAllSessionDataOld(out procResult);
        }

        public System.Collections.Generic.List<GetAllSessionDataOldReturnModel> GetAllSessionDataOld(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAllSessionDataOldReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllSessionDataOldReturnModel>> GetAllSessionDataOldAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAllSessionDataOld(out procResult));
        }

        public System.Collections.Generic.List<GetAppUserByIdReturnModel> GetAppUserById(int? appuserId, int? projectId)
        {
            int procResult;
            return GetAppUserById(appuserId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAppUserByIdReturnModel> GetAppUserById(int? appuserId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAppUserByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAppUserByIdReturnModel>> GetAppUserByIdAsync(int? appuserId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAppUserById(appuserId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel> GetBlmisSalesByMonth(string startDate, int? projectId)
        {
            int procResult;
            return GetBlmisSalesByMonth(startDate, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel> GetBlmisSalesByMonth(string startDate, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel>> GetBlmisSalesByMonthAsync(string startDate, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetBlmisSalesByMonth(startDate, projectId, out procResult));
        }

        public GetClientlistReturnModel GetClientlist(int? regionId, int? projectId)
        {
            int procResult;
            return GetClientlist(regionId, projectId, out procResult);
        }

        public GetClientlistReturnModel GetClientlist(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new GetClientlistReturnModel();
        }

        public System.Threading.Tasks.Task<GetClientlistReturnModel> GetClientlistAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetClientlist(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel> GetCurrentUserForEachLhvByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return GetCurrentUserForEachLhvByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel> GetCurrentUserForEachLhvByRegionId(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel>> GetCurrentUserForEachLhvByRegionIdAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetCurrentUserForEachLhvByRegionId(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetDashboardcountReturnModel> GetDashboardcount(int? projectId)
        {
            int procResult;
            return GetDashboardcount(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetDashboardcountReturnModel> GetDashboardcount(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDashboardcountReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetDashboardcountReturnModel>> GetDashboardcountAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetDashboardcount(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetfollowupByNamesReturnModel> GetfollowupByNames(int? projectId)
        {
            int procResult;
            return GetfollowupByNames(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetfollowupByNamesReturnModel> GetfollowupByNames(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetfollowupByNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetfollowupByNamesReturnModel>> GetfollowupByNamesAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetfollowupByNames(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel> GetfollowupByNamesByLhvId(int? lhvId, int? projectId)
        {
            int procResult;
            return GetfollowupByNamesByLhvId(lhvId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel> GetfollowupByNamesByLhvId(int? lhvId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel>> GetfollowupByNamesByLhvIdAsync(int? lhvId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetfollowupByNamesByLhvId(lhvId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetFutureSessionDataReturnModel> GetFutureSessionData(int? appUserId, System.DateTime? startDate, int? projectId)
        {
            int procResult;
            return GetFutureSessionData(appUserId, startDate, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetFutureSessionDataReturnModel> GetFutureSessionData(int? appUserId, System.DateTime? startDate, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetFutureSessionDataReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetFutureSessionDataReturnModel>> GetFutureSessionDataAsync(int? appUserId, System.DateTime? startDate, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetFutureSessionData(appUserId, startDate, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel> GetlhvMavraCountByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return GetlhvMavraCountByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel> GetlhvMavraCountByRegionId(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel>> GetlhvMavraCountByRegionIdAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetlhvMavraCountByRegionId(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel> GetMwraByIdWithNames(int? mwraId)
        {
            int procResult;
            return GetMwraByIdWithNames(mwraId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel> GetMwraByIdWithNames(int? mwraId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel>> GetMwraByIdWithNamesAsync(int? mwraId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMwraByIdWithNames(mwraId, out procResult));
        }

        public System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel> GetMwraClienNametByMwraId(int? mwraId)
        {
            int procResult;
            return GetMwraClienNametByMwraId(mwraId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel> GetMwraClienNametByMwraId(int? mwraId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel>> GetMwraClienNametByMwraIdAsync(int? mwraId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMwraClienNametByMwraId(mwraId, out procResult));
        }

        public System.Collections.Generic.List<GetMwraClienWithNameReturnModel> GetMwraClienWithName(int? appUserId, int? projectId)
        {
            int procResult;
            return GetMwraClienWithName(appUserId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraClienWithNameReturnModel> GetMwraClienWithName(int? appUserId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMwraClienWithNameReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraClienWithNameReturnModel>> GetMwraClienWithNameAsync(int? appUserId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMwraClienWithName(appUserId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel> GetMwraNamesBySessionId(int? sessionId)
        {
            int procResult;
            return GetMwraNamesBySessionId(sessionId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel> GetMwraNamesBySessionId(int? sessionId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel>> GetMwraNamesBySessionIdAsync(int? sessionId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMwraNamesBySessionId(sessionId, out procResult));
        }

        public System.Collections.Generic.List<GetMwraSessionReturnModel> GetMwraSession(int? projectId)
        {
            int procResult;
            return GetMwraSession(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraSessionReturnModel> GetMwraSession(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMwraSessionReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraSessionReturnModel>> GetMwraSessionAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMwraSession(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetNoorClientCheckListingReturnModel> GetNoorClientCheckListing(int? noorChecklistId)
        {
            int procResult;
            return GetNoorClientCheckListing(noorChecklistId, out procResult);
        }

        public System.Collections.Generic.List<GetNoorClientCheckListingReturnModel> GetNoorClientCheckListing(int? noorChecklistId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetNoorClientCheckListingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetNoorClientCheckListingReturnModel>> GetNoorClientCheckListingAsync(int? noorChecklistId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetNoorClientCheckListing(noorChecklistId, out procResult));
        }

        public int GetPortalUsers()
        {

            return 0;
        }

        public System.Collections.Generic.List<GetProductByUserIdReturnModel> GetProductByUserId(int? userId, int? projectId, int? regionId)
        {
            int procResult;
            return GetProductByUserId(userId, projectId, regionId, out procResult);
        }

        public System.Collections.Generic.List<GetProductByUserIdReturnModel> GetProductByUserId(int? userId, int? projectId, int? regionId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetProductByUserIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetProductByUserIdReturnModel>> GetProductByUserIdAsync(int? userId, int? projectId, int? regionId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetProductByUserId(userId, projectId, regionId, out procResult));
        }

        public System.Collections.Generic.List<GetProductListReturnModel> GetProductList()
        {
            int procResult;
            return GetProductList(out procResult);
        }

        public System.Collections.Generic.List<GetProductListReturnModel> GetProductList(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetProductListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetProductListReturnModel>> GetProductListAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetProductList(out procResult));
        }

        public System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel> GetQuantityByUserIdAndProductId(int? userId, int? productId)
        {
            int procResult;
            return GetQuantityByUserIdAndProductId(userId, productId, out procResult);
        }

        public System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel> GetQuantityByUserIdAndProductId(int? userId, int? productId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel>> GetQuantityByUserIdAndProductIdAsync(int? userId, int? productId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetQuantityByUserIdAndProductId(userId, productId, out procResult));
        }

        public GetRealtimeChecklistReturnModel GetRealtimeChecklist(int? visitorId, int? regionId, int? projectId)
        {
            int procResult;
            return GetRealtimeChecklist(visitorId, regionId, projectId, out procResult);
        }

        public GetRealtimeChecklistReturnModel GetRealtimeChecklist(int? visitorId, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new GetRealtimeChecklistReturnModel();
        }

        public System.Threading.Tasks.Task<GetRealtimeChecklistReturnModel> GetRealtimeChecklistAsync(int? visitorId, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRealtimeChecklist(visitorId, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<GetRoleByProjectReturnModel> GetRoleByProject(int? projectId)
        {
            int procResult;
            return GetRoleByProject(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetRoleByProjectReturnModel> GetRoleByProject(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetRoleByProjectReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoleByProjectReturnModel>> GetRoleByProjectAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRoleByProject(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetSessionCallListReturnModel> GetSessionCallList(int? projectId)
        {
            int procResult;
            return GetSessionCallList(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetSessionCallListReturnModel> GetSessionCallList(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetSessionCallListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetSessionCallListReturnModel>> GetSessionCallListAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetSessionCallList(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetSessionCallmarviListReturnModel> GetSessionCallmarviList(int? projectId)
        {
            int procResult;
            return GetSessionCallmarviList(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetSessionCallmarviListReturnModel> GetSessionCallmarviList(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetSessionCallmarviListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetSessionCallmarviListReturnModel>> GetSessionCallmarviListAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetSessionCallmarviList(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetSheduleActivityListReturnModel> GetSheduleActivityList(int? projectId)
        {
            int procResult;
            return GetSheduleActivityList(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetSheduleActivityListReturnModel> GetSheduleActivityList(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetSheduleActivityListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetSheduleActivityListReturnModel>> GetSheduleActivityListAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetSheduleActivityList(projectId, out procResult));
        }

        public System.Collections.Generic.List<GetStockQuantityReturnModel> GetStockQuantity(int? productId)
        {
            int procResult;
            return GetStockQuantity(productId, out procResult);
        }

        public System.Collections.Generic.List<GetStockQuantityReturnModel> GetStockQuantity(int? productId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetStockQuantityReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetStockQuantityReturnModel>> GetStockQuantityAsync(int? productId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetStockQuantity(productId, out procResult));
        }

        public System.Collections.Generic.List<GetUsersByUserTypeReturnModel> GetUsersByUserType(string userType, int? projectId)
        {
            int procResult;
            return GetUsersByUserType(userType, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetUsersByUserTypeReturnModel> GetUsersByUserType(string userType, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetUsersByUserTypeReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetUsersByUserTypeReturnModel>> GetUsersByUserTypeAsync(string userType, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetUsersByUserType(userType, projectId, out procResult));
        }

        public System.Collections.Generic.List<HcpListingWithNamesReturnModel> HcpListingWithNames(string userType, int? projectId)
        {
            int procResult;
            return HcpListingWithNames(userType, projectId, out procResult);
        }

        public System.Collections.Generic.List<HcpListingWithNamesReturnModel> HcpListingWithNames(string userType, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<HcpListingWithNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<HcpListingWithNamesReturnModel>> HcpListingWithNamesAsync(string userType, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(HcpListingWithNames(userType, projectId, out procResult));
        }

        public System.Collections.Generic.List<MarviClientGenerationReportReturnModel> MarviClientGenerationReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return MarviClientGenerationReport(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<MarviClientGenerationReportReturnModel> MarviClientGenerationReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<MarviClientGenerationReportReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<MarviClientGenerationReportReturnModel>> MarviClientGenerationReportAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(MarviClientGenerationReport(startDate, endDate, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel> MwraForEachLhvByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return MwraForEachLhvByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel> MwraForEachLhvByRegionId(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel>> MwraForEachLhvByRegionIdAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(MwraForEachLhvByRegionId(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<NewUserCurrentMonthReturnModel> NewUserCurrentMonth(int? projectId)
        {
            int procResult;
            return NewUserCurrentMonth(projectId, out procResult);
        }

        public System.Collections.Generic.List<NewUserCurrentMonthReturnModel> NewUserCurrentMonth(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<NewUserCurrentMonthReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<NewUserCurrentMonthReturnModel>> NewUserCurrentMonthAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(NewUserCurrentMonth(projectId, out procResult));
        }

        public System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel> NewUserCurrentMonthByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return NewUserCurrentMonthByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel> NewUserCurrentMonthByRegionId(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel>> NewUserCurrentMonthByRegionIdAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(NewUserCurrentMonthByRegionId(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel> NewUserEachLhvByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return NewUserEachLhvByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel> NewUserEachLhvByRegionId(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel>> NewUserEachLhvByRegionIdAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(NewUserEachLhvByRegionId(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<NoorCheckListReturnModel> NoorCheckList(int? projectId)
        {
            int procResult;
            return NoorCheckList(projectId, out procResult);
        }

        public System.Collections.Generic.List<NoorCheckListReturnModel> NoorCheckList(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<NoorCheckListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<NoorCheckListReturnModel>> NoorCheckListAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(NoorCheckList(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpAliveChildReturnModel> SpAliveChild(int? projectId, System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return SpAliveChild(projectId, startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<SpAliveChildReturnModel> SpAliveChild(int? projectId, System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpAliveChildReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpAliveChildReturnModel>> SpAliveChildAsync(int? projectId, System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpAliveChild(projectId, startDate, endDate, out procResult));
        }

        public System.Collections.Generic.List<SpAssignRoleToProjectReturnModel> SpAssignRoleToProject()
        {
            int procResult;
            return SpAssignRoleToProject(out procResult);
        }

        public System.Collections.Generic.List<SpAssignRoleToProjectReturnModel> SpAssignRoleToProject(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpAssignRoleToProjectReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpAssignRoleToProjectReturnModel>> SpAssignRoleToProjectAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpAssignRoleToProject(out procResult));
        }

        public System.Collections.Generic.List<SpBlmisInventoryReturnModel> SpBlmisInventory(int? projectId)
        {
            int procResult;
            return SpBlmisInventory(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpBlmisInventoryReturnModel> SpBlmisInventory(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpBlmisInventoryReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpBlmisInventoryReturnModel>> SpBlmisInventoryAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpBlmisInventory(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpBlmisSellsReturnModel> SpBlmisSells(int? projectId, int? marviId)
        {
            int procResult;
            return SpBlmisSells(projectId, marviId, out procResult);
        }

        public System.Collections.Generic.List<SpBlmisSellsReturnModel> SpBlmisSells(int? projectId, int? marviId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpBlmisSellsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpBlmisSellsReturnModel>> SpBlmisSellsAsync(int? projectId, int? marviId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpBlmisSells(projectId, marviId, out procResult));
        }

        public System.Collections.Generic.List<SpBlmisUserStockReturnModel> SpBlmisUserStock(int? projectId, int? marviId)
        {
            int procResult;
            return SpBlmisUserStock(projectId, marviId, out procResult);
        }

        public System.Collections.Generic.List<SpBlmisUserStockReturnModel> SpBlmisUserStock(int? projectId, int? marviId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpBlmisUserStockReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpBlmisUserStockReturnModel>> SpBlmisUserStockAsync(int? projectId, int? marviId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpBlmisUserStock(projectId, marviId, out procResult));
        }

        public System.Collections.Generic.List<SpClientCheckListReturnModel> SpClientCheckList(int? projectId)
        {
            int procResult;
            return SpClientCheckList(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpClientCheckListReturnModel> SpClientCheckList(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpClientCheckListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpClientCheckListReturnModel>> SpClientCheckListAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpClientCheckList(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpClmisHandStockReturnModel> SpClmisHandStock(int? projectId)
        {
            int procResult;
            return SpClmisHandStock(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpClmisHandStockReturnModel> SpClmisHandStock(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpClmisHandStockReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpClmisHandStockReturnModel>> SpClmisHandStockAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpClmisHandStock(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpClmisInventoryReturnModel> SpClmisInventory(int? projectId)
        {
            int procResult;
            return SpClmisInventory(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpClmisInventoryReturnModel> SpClmisInventory(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpClmisInventoryReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpClmisInventoryReturnModel>> SpClmisInventoryAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpClmisInventory(projectId, out procResult));
        }

        public int SpClmisLhvDetail()
        {

            return 0;
        }

        public int SpClmisLhvDetails()
        {

            return 0;
        }

        public System.Collections.Generic.List<SpContentcmsReturnModel> SpContentcms(int? projectId)
        {
            int procResult;
            return SpContentcms(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContentcmsReturnModel> SpContentcms(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpContentcmsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpContentcmsReturnModel>> SpContentcmsAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpContentcms(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpContentpmsReturnModel> SpContentpms(int? projectId)
        {
            int procResult;
            return SpContentpms(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContentpmsReturnModel> SpContentpms(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpContentpmsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpContentpmsReturnModel>> SpContentpmsAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpContentpms(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingReturnModel> SpContinuedUserClientListing(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpContinuedUserClientListing(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingReturnModel> SpContinuedUserClientListing(int? mwraclientId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpContinuedUserClientListingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpContinuedUserClientListingReturnModel>> SpContinuedUserClientListingAsync(int? mwraclientId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpContinuedUserClientListing(mwraclientId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel> SpContinuedUserClientListingCsv(int? projectId)
        {
            int procResult;
            return SpContinuedUserClientListingCsv(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel> SpContinuedUserClientListingCsv(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel>> SpContinuedUserClientListingCsvAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpContinuedUserClientListingCsv(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel> SpCurrentUserMethodWise(int? projectId)
        {
            int procResult;
            return SpCurrentUserMethodWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel> SpCurrentUserMethodWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel>> SpCurrentUserMethodWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpCurrentUserMethodWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpDetailMcprReturnModel> SpDetailMcpr(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpDetailMcpr(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpDetailMcprReturnModel> SpDetailMcpr(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpDetailMcprReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpDetailMcprReturnModel>> SpDetailMcprAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpDetailMcpr(startDate, endDate, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel> SpFpUsersTaluqaTehsilwise(System.DateTime? startDate, System.DateTime? endDate, int? projectId)
        {
            int procResult;
            return SpFpUsersTaluqaTehsilwise(startDate, endDate, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel> SpFpUsersTaluqaTehsilwise(System.DateTime? startDate, System.DateTime? endDate, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel>> SpFpUsersTaluqaTehsilwiseAsync(System.DateTime? startDate, System.DateTime? endDate, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpFpUsersTaluqaTehsilwise(startDate, endDate, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel> SpGetAllInventoryByUserId(int? projectId, int? userId)
        {
            int procResult;
            return SpGetAllInventoryByUserId(projectId, userId, out procResult);
        }

        public System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel> SpGetAllInventoryByUserId(int? projectId, int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel>> SpGetAllInventoryByUserIdAsync(int? projectId, int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetAllInventoryByUserId(projectId, userId, out procResult));
        }

        public System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel> SpGetAllMarviWithNames(int? projectId)
        {
            int procResult;
            return SpGetAllMarviWithNames(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel> SpGetAllMarviWithNames(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel>> SpGetAllMarviWithNamesAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetAllMarviWithNames(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel> SpGetAppBibProductsWithCategories(int? projectId)
        {
            int procResult;
            return SpGetAppBibProductsWithCategories(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel> SpGetAppBibProductsWithCategories(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel>> SpGetAppBibProductsWithCategoriesAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetAppBibProductsWithCategories(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpGetGeoLocationReturnModel> SpGetGeoLocation()
        {
            int procResult;
            return SpGetGeoLocation(out procResult);
        }

        public System.Collections.Generic.List<SpGetGeoLocationReturnModel> SpGetGeoLocation(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetGeoLocationReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetGeoLocationReturnModel>> SpGetGeoLocationAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetGeoLocation(out procResult));
        }

        public System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel> SpGetMwraByLhvIdwithmwraCount(int? lhvId, int? projectId)
        {
            int procResult;
            return SpGetMwraByLhvIdwithmwraCount(lhvId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel> SpGetMwraByLhvIdwithmwraCount(int? lhvId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel>> SpGetMwraByLhvIdwithmwraCountAsync(int? lhvId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetMwraByLhvIdwithmwraCount(lhvId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpGetProjectDetailsReturnModel> SpGetProjectDetails()
        {
            int procResult;
            return SpGetProjectDetails(out procResult);
        }

        public System.Collections.Generic.List<SpGetProjectDetailsReturnModel> SpGetProjectDetails(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetProjectDetailsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetProjectDetailsReturnModel>> SpGetProjectDetailsAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetProjectDetails(out procResult));
        }

        public System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel> SpGetRolesByProjectId(int? projectId)
        {
            int procResult;
            return SpGetRolesByProjectId(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel> SpGetRolesByProjectId(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel>> SpGetRolesByProjectIdAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGetRolesByProjectId(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpInventoryReturnReturnModel> SpInventoryReturn(int? projectId)
        {
            int procResult;
            return SpInventoryReturn(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpInventoryReturnReturnModel> SpInventoryReturn(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpInventoryReturnReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpInventoryReturnReturnModel>> SpInventoryReturnAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpInventoryReturn(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLhvCheckListReturnModel> SpLhvCheckList(int? projectId)
        {
            int procResult;
            return SpLhvCheckList(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLhvCheckListReturnModel> SpLhvCheckList(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLhvCheckListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLhvCheckListReturnModel>> SpLhvCheckListAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLhvCheckList(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLhvDetailsReturnModel> SpLhvDetails(int? regionId, int? projectId)
        {
            int procResult;
            return SpLhvDetails(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLhvDetailsReturnModel> SpLhvDetails(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLhvDetailsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLhvDetailsReturnModel>> SpLhvDetailsAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLhvDetails(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel> SpLiveProgressForVisitInCommunityDaysWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitInCommunityDaysWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel> SpLiveProgressForVisitInCommunityDaysWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel>> SpLiveProgressForVisitInCommunityDaysWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLiveProgressForVisitInCommunityDaysWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitInCommunityMonthsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitInCommunityMonthsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitInCommunityMonthsWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel>> SpLiveProgressForVisitInCommunityMonthsWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLiveProgressForVisitInCommunityMonthsWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel> SpLiveProgressForVisitInCommunityYearsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitInCommunityYearsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel> SpLiveProgressForVisitInCommunityYearsWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel>> SpLiveProgressForVisitInCommunityYearsWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLiveProgressForVisitInCommunityYearsWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel> SpLiveProgressForVisitMarviInCommunityDaysWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitMarviInCommunityDaysWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel> SpLiveProgressForVisitMarviInCommunityDaysWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel>> SpLiveProgressForVisitMarviInCommunityDaysWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLiveProgressForVisitMarviInCommunityDaysWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityMonthsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitMarviInCommunityMonthsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityMonthsWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel>> SpLiveProgressForVisitMarviInCommunityMonthsWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLiveProgressForVisitMarviInCommunityMonthsWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityYearsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitMarviInCommunityYearsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityYearsWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel>> SpLiveProgressForVisitMarviInCommunityYearsWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLiveProgressForVisitMarviInCommunityYearsWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel> SpMcprTaluqaWise(int? projectId)
        {
            int procResult;
            return SpMcprTaluqaWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel> SpMcprTaluqaWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel>> SpMcprTaluqaWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMcprTaluqaWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMissedSessionDateReturnModel> SpMissedSessionDate()
        {
            int procResult;
            return SpMissedSessionDate(out procResult);
        }

        public System.Collections.Generic.List<SpMissedSessionDateReturnModel> SpMissedSessionDate(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMissedSessionDateReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMissedSessionDateReturnModel>> SpMissedSessionDateAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMissedSessionDate(out procResult));
        }

        public System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel> SpMissedSessionsWithMwraNames(int? projectId)
        {
            int procResult;
            return SpMissedSessionsWithMwraNames(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel> SpMissedSessionsWithMwraNames(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel>> SpMissedSessionsWithMwraNamesAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMissedSessionsWithMwraNames(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel> SpMultiProjectAppDetails(int? projectId)
        {
            int procResult;
            return SpMultiProjectAppDetails(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel> SpMultiProjectAppDetails(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel>> SpMultiProjectAppDetailsAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMultiProjectAppDetails(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMwraClientListingCsvReturnModel> SpMwraClientListingCsv(int? projectId)
        {
            int procResult;
            return SpMwraClientListingCsv(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraClientListingCsvReturnModel> SpMwraClientListingCsv(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwraClientListingCsvReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraClientListingCsvReturnModel>> SpMwraClientListingCsvAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwraClientListingCsv(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMwraClientListingNewReturnModel> SpMwraClientListingNew(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpMwraClientListingNew(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraClientListingNewReturnModel> SpMwraClientListingNew(int? mwraclientId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwraClientListingNewReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraClientListingNewReturnModel>> SpMwraClientListingNewAsync(int? mwraclientId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwraClientListingNew(mwraclientId, projectId, out procResult));
        }

        public SpmwraClientListingtestReturnModel SpmwraClientListingtest(int? mwraclientId)
        {
            int procResult;
            return SpmwraClientListingtest(mwraclientId, out procResult);
        }

        public SpmwraClientListingtestReturnModel SpmwraClientListingtest(int? mwraclientId, out int procResult)
        {

            procResult = 0;
            return new SpmwraClientListingtestReturnModel();
        }

        public System.Threading.Tasks.Task<SpmwraClientListingtestReturnModel> SpmwraClientListingtestAsync(int? mwraclientId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpmwraClientListingtest(mwraclientId, out procResult));
        }

        public System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel> SpMwraDropOutClientListing(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpMwraDropOutClientListing(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel> SpMwraDropOutClientListing(int? mwraclientId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel>> SpMwraDropOutClientListingAsync(int? mwraclientId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwraDropOutClientListing(mwraclientId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel> SpMwrasAgeWiseReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpMwrasAgeWiseReport(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel> SpMwrasAgeWiseReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel>> SpMwrasAgeWiseReportAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwrasAgeWiseReport(startDate, endDate, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMwrasClientListingReturnModel> SpMwrasClientListing()
        {
            int procResult;
            return SpMwrasClientListing(out procResult);
        }

        public System.Collections.Generic.List<SpMwrasClientListingReturnModel> SpMwrasClientListing(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwrasClientListingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasClientListingReturnModel>> SpMwrasClientListingAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwrasClientListing(out procResult));
        }

        public System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel> SpMwrasClientListingtestingpurpost(int? mwraclientId)
        {
            int procResult;
            return SpMwrasClientListingtestingpurpost(mwraclientId, out procResult);
        }

        public System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel> SpMwrasClientListingtestingpurpost(int? mwraclientId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel>> SpMwrasClientListingtestingpurpostAsync(int? mwraclientId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwrasClientListingtestingpurpost(mwraclientId, out procResult));
        }

        public System.Collections.Generic.List<SpMwrasListingReturnModel> SpMwrasListing(int? projectId)
        {
            int procResult;
            return SpMwrasListing(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwrasListingReturnModel> SpMwrasListing(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwrasListingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasListingReturnModel>> SpMwrasListingAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwrasListing(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpMwraWithMwraclientReturnModel> SpMwraWithMwraclient(int? appUserId)
        {
            int procResult;
            return SpMwraWithMwraclient(appUserId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraWithMwraclientReturnModel> SpMwraWithMwraclient(int? appUserId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpMwraWithMwraclientReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraWithMwraclientReturnModel>> SpMwraWithMwraclientAsync(int? appUserId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpMwraWithMwraclient(appUserId, out procResult));
        }

        public System.Collections.Generic.List<SpNewUserClientListingReturnModel> SpNewUserClientListing(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpNewUserClientListing(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserClientListingReturnModel> SpNewUserClientListing(int? mwraclientId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpNewUserClientListingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserClientListingReturnModel>> SpNewUserClientListingAsync(int? mwraclientId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpNewUserClientListing(mwraclientId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel> SpNewUserClientListingCsv(int? projectId)
        {
            int procResult;
            return SpNewUserClientListingCsv(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel> SpNewUserClientListingCsv(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel>> SpNewUserClientListingCsvAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpNewUserClientListingCsv(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseReturnModel> SpNewUserMethodWise(int? projectId)
        {
            int procResult;
            return SpNewUserMethodWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseReturnModel> SpNewUserMethodWise(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpNewUserMethodWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserMethodWiseReturnModel>> SpNewUserMethodWiseAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpNewUserMethodWise(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel> SpNewUserMethodWiseByRegionId(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpNewUserMethodWiseByRegionId(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel> SpNewUserMethodWiseByRegionId(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel>> SpNewUserMethodWiseByRegionIdAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpNewUserMethodWiseByRegionId(startDate, endDate, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpNoorCheckListReturnModel> SpNoorCheckList()
        {
            int procResult;
            return SpNoorCheckList(out procResult);
        }

        public System.Collections.Generic.List<SpNoorCheckListReturnModel> SpNoorCheckList(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpNoorCheckListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpNoorCheckListReturnModel>> SpNoorCheckListAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpNoorCheckList(out procResult));
        }

        public System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel> SpPmsAnalticswithCount(int? projectId)
        {
            int procResult;
            return SpPmsAnalticswithCount(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel> SpPmsAnalticswithCount(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel>> SpPmsAnalticswithCountAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpPmsAnalticswithCount(projectId, out procResult));
        }

        public System.Collections.Generic.List<SppregnantWomanReturnModel> SppregnantWoman()
        {
            int procResult;
            return SppregnantWoman(out procResult);
        }

        public System.Collections.Generic.List<SppregnantWomanReturnModel> SppregnantWoman(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SppregnantWomanReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SppregnantWomanReturnModel>> SppregnantWomanAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SppregnantWoman(out procResult));
        }

        public System.Collections.Generic.List<SpRoleMenuAccessReturnModel> SpRoleMenuAccess()
        {
            int procResult;
            return SpRoleMenuAccess(out procResult);
        }

        public System.Collections.Generic.List<SpRoleMenuAccessReturnModel> SpRoleMenuAccess(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpRoleMenuAccessReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpRoleMenuAccessReturnModel>> SpRoleMenuAccessAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpRoleMenuAccess(out procResult));
        }

        public System.Collections.Generic.List<SpsessionContentReturnModel> SpsessionContent(int? sessionId)
        {
            int procResult;
            return SpsessionContent(sessionId, out procResult);
        }

        public System.Collections.Generic.List<SpsessionContentReturnModel> SpsessionContent(int? sessionId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpsessionContentReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpsessionContentReturnModel>> SpsessionContentAsync(int? sessionId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpsessionContent(sessionId, out procResult));
        }

        public System.Collections.Generic.List<SPsessionInventoryReturnModel> SPsessionInventory(int? sessionId)
        {
            int procResult;
            return SPsessionInventory(sessionId, out procResult);
        }

        public System.Collections.Generic.List<SPsessionInventoryReturnModel> SPsessionInventory(int? sessionId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SPsessionInventoryReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SPsessionInventoryReturnModel>> SPsessionInventoryAsync(int? sessionId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SPsessionInventory(sessionId, out procResult));
        }

        public System.Collections.Generic.List<SPsessionmwraReturnModel> SPsessionmwra(int? sessionid)
        {
            int procResult;
            return SPsessionmwra(sessionid, out procResult);
        }

        public System.Collections.Generic.List<SPsessionmwraReturnModel> SPsessionmwra(int? sessionid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SPsessionmwraReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SPsessionmwraReturnModel>> SPsessionmwraAsync(int? sessionid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SPsessionmwra(sessionid, out procResult));
        }

        public System.Collections.Generic.List<SpStockListReturnModel> SpStockList()
        {
            int procResult;
            return SpStockList(out procResult);
        }

        public System.Collections.Generic.List<SpStockListReturnModel> SpStockList(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpStockListReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpStockListReturnModel>> SpStockListAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpStockList(out procResult));
        }

        public System.Collections.Generic.List<SpTargetPopuplationReturnModel> SpTargetPopuplation(int? regionId, int? projectId)
        {
            int procResult;
            return SpTargetPopuplation(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTargetPopuplationReturnModel> SpTargetPopuplation(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTargetPopuplationReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTargetPopuplationReturnModel>> SpTargetPopuplationAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTargetPopuplation(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTestCurrentUserReturnModel> SpTestCurrentUser(int? projectId)
        {
            int procResult;
            return SpTestCurrentUser(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestCurrentUserReturnModel> SpTestCurrentUser(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestCurrentUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestCurrentUserReturnModel>> SpTestCurrentUserAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestCurrentUser(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel> SpTestCurrentUserMethodWise()
        {
            int procResult;
            return SpTestCurrentUserMethodWise(out procResult);
        }

        public System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel> SpTestCurrentUserMethodWise(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel>> SpTestCurrentUserMethodWiseAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestCurrentUserMethodWise(out procResult));
        }

        public System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel> SpTestDetailsOfShiftedClients(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpTestDetailsOfShiftedClients(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel> SpTestDetailsOfShiftedClients(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel>> SpTestDetailsOfShiftedClientsAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestDetailsOfShiftedClients(startDate, endDate, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel> SpTestFpUsersTaluqaTehsilWise()
        {
            int procResult;
            return SpTestFpUsersTaluqaTehsilWise(out procResult);
        }

        public System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel> SpTestFpUsersTaluqaTehsilWise(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel>> SpTestFpUsersTaluqaTehsilWiseAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestFpUsersTaluqaTehsilWise(out procResult));
        }

        public System.Collections.Generic.List<SpTestInterventionAreaReturnModel> SpTestInterventionArea(int? regionId, int? projectId)
        {
            int procResult;
            return SpTestInterventionArea(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestInterventionAreaReturnModel> SpTestInterventionArea(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestInterventionAreaReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestInterventionAreaReturnModel>> SpTestInterventionAreaAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestInterventionArea(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel> SpTestNewUserMethodWise()
        {
            int procResult;
            return SpTestNewUserMethodWise(out procResult);
        }

        public System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel> SpTestNewUserMethodWise(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel>> SpTestNewUserMethodWiseAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestNewUserMethodWise(out procResult));
        }

        public System.Collections.Generic.List<SpTestTargetPopuplationReturnModel> SpTestTargetPopuplation()
        {
            int procResult;
            return SpTestTargetPopuplation(out procResult);
        }

        public System.Collections.Generic.List<SpTestTargetPopuplationReturnModel> SpTestTargetPopuplation(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestTargetPopuplationReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestTargetPopuplationReturnModel>> SpTestTargetPopuplationAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestTargetPopuplation(out procResult));
        }

        public System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel> SpTestUnmetNeedInMwras(int? projectId)
        {
            int procResult;
            return SpTestUnmetNeedInMwras(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel> SpTestUnmetNeedInMwras(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel>> SpTestUnmetNeedInMwrasAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTestUnmetNeedInMwras(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTotalClmisHandStockReturnModel> SpTotalClmisHandStock(int? projectId)
        {
            int procResult;
            return SpTotalClmisHandStock(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTotalClmisHandStockReturnModel> SpTotalClmisHandStock(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTotalClmisHandStockReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTotalClmisHandStockReturnModel>> SpTotalClmisHandStockAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTotalClmisHandStock(projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTotalClmisStocksReturnModel> SpTotalClmisStocks(int? projectId, int? regionid)
        {
            int procResult;
            return SpTotalClmisStocks(projectId, regionid, out procResult);
        }

        public System.Collections.Generic.List<SpTotalClmisStocksReturnModel> SpTotalClmisStocks(int? projectId, int? regionid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTotalClmisStocksReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTotalClmisStocksReturnModel>> SpTotalClmisStocksAsync(int? projectId, int? regionid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTotalClmisStocks(projectId, regionid, out procResult));
        }

        public System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel> SpTrendAmongCurrentUsers(int? regionId, int? projectId)
        {
            int procResult;
            return SpTrendAmongCurrentUsers(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel> SpTrendAmongCurrentUsers(int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel>> SpTrendAmongCurrentUsersAsync(int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTrendAmongCurrentUsers(regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel> SpTrendAmongNewUsers(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpTrendAmongNewUsers(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel> SpTrendAmongNewUsers(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel>> SpTrendAmongNewUsersAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTrendAmongNewUsers(startDate, endDate, regionId, projectId, out procResult));
        }

        public System.Collections.Generic.List<SpUsersReturnModel> SpUsers(int? projectId)
        {
            int procResult;
            return SpUsers(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpUsersReturnModel> SpUsers(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUsersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersReturnModel>> SpUsersAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUsers(projectId, out procResult));
        }

        public System.Collections.Generic.List<TaluqaListingDataReturnModel> TaluqaListingData(int? projectId)
        {
            int procResult;
            return TaluqaListingData(projectId, out procResult);
        }

        public System.Collections.Generic.List<TaluqaListingDataReturnModel> TaluqaListingData(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TaluqaListingDataReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<TaluqaListingDataReturnModel>> TaluqaListingDataAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(TaluqaListingData(projectId, out procResult));
        }

        public System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel> TestCurrentUserForEachLhv()
        {
            int procResult;
            return TestCurrentUserForEachLhv(out procResult);
        }

        public System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel> TestCurrentUserForEachLhv(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel>> TestCurrentUserForEachLhvAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(TestCurrentUserForEachLhv(out procResult));
        }

        public System.Collections.Generic.List<TestMwraForEachLhvReturnModel> TestMwraForEachLhv()
        {
            int procResult;
            return TestMwraForEachLhv(out procResult);
        }

        public System.Collections.Generic.List<TestMwraForEachLhvReturnModel> TestMwraForEachLhv(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TestMwraForEachLhvReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestMwraForEachLhvReturnModel>> TestMwraForEachLhvAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(TestMwraForEachLhv(out procResult));
        }

        public System.Collections.Generic.List<TestProcedureReturnModel> TestProcedure()
        {
            int procResult;
            return TestProcedure(out procResult);
        }

        public System.Collections.Generic.List<TestProcedureReturnModel> TestProcedure(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TestProcedureReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestProcedureReturnModel>> TestProcedureAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(TestProcedure(out procResult));
        }

        public System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel> TestTotalMcprTaluqaWise()
        {
            int procResult;
            return TestTotalMcprTaluqaWise(out procResult);
        }

        public System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel> TestTotalMcprTaluqaWise(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel>> TestTotalMcprTaluqaWiseAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(TestTotalMcprTaluqaWise(out procResult));
        }

        public System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel> TestTotalMwraStatusWise()
        {
            int procResult;
            return TestTotalMwraStatusWise(out procResult);
        }

        public System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel> TestTotalMwraStatusWise(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel>> TestTotalMwraStatusWiseAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(TestTotalMwraStatusWise(out procResult));
        }

        public System.Collections.Generic.List<UnionCouncilListingDataReturnModel> UnionCouncilListingData(int? projectId)
        {
            int procResult;
            return UnionCouncilListingData(projectId, out procResult);
        }

        public System.Collections.Generic.List<UnionCouncilListingDataReturnModel> UnionCouncilListingData(int? projectId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UnionCouncilListingDataReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UnionCouncilListingDataReturnModel>> UnionCouncilListingDataAsync(int? projectId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UnionCouncilListingData(projectId, out procResult));
        }

    }
}
// </auto-generated>
