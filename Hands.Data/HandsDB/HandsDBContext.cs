// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Hands.Data.HandsDB
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class HandsDBContext : System.Data.Entity.DbContext, IHandsDBContext
    {
        public System.Data.Entity.DbSet<AccessLevel> AccessLevels { get; set; } // AccessLevel
        public System.Data.Entity.DbSet<ApiAuthentication> ApiAuthentications { get; set; } // api_authentication
        public System.Data.Entity.DbSet<ApiDuplicateRecordLog> ApiDuplicateRecordLogs { get; set; } // Api_Duplicate_Record_Logs
        public System.Data.Entity.DbSet<ApiErrorLog> ApiErrorLogs { get; set; } // Api_Error_Log
        public System.Data.Entity.DbSet<ApiLog> ApiLogs { get; set; } // Api_logs
        public System.Data.Entity.DbSet<AppMenu> AppMenus { get; set; } // AppMenu
        public System.Data.Entity.DbSet<AppUser> AppUsers { get; set; } // app_users
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; } // AspNetRoles
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public System.Data.Entity.DbSet<AssignMenuToApp> AssignMenuToApps { get; set; } // AssignMenuToApp
        public System.Data.Entity.DbSet<AssignMenuToProject> AssignMenuToProjects { get; set; } // AssignMenuToProject
        public System.Data.Entity.DbSet<AssignRoleToProject> AssignRoleToProjects { get; set; } // AssignRoleToProject
        public System.Data.Entity.DbSet<BlmisCategory> BlmisCategories { get; set; } // BlmisCategory
        public System.Data.Entity.DbSet<BlmisSellHistory> BlmisSellHistories { get; set; } // BlmisSellHistory
        public System.Data.Entity.DbSet<BlmisUserstock> BlmisUserstocks { get; set; } // Blmis_userstock
        public System.Data.Entity.DbSet<Category> Categories { get; set; } // categories
        public System.Data.Entity.DbSet<City> Cities { get; set; } // cities
        public System.Data.Entity.DbSet<ClientChecklist> ClientChecklists { get; set; } // client_checklist
        public System.Data.Entity.DbSet<Content> Contents { get; set; } // content
        public System.Data.Entity.DbSet<CurrentMrwa20210923> CurrentMrwa20210923 { get; set; } // CurrentMrwa_20210923
        public System.Data.Entity.DbSet<Device> Devices { get; set; } // Devices
        public System.Data.Entity.DbSet<InventoryReturn> InventoryReturns { get; set; } // InventoryReturns
        public System.Data.Entity.DbSet<LhvChecklist> LhvChecklists { get; set; } // lhv_checklist
        public System.Data.Entity.DbSet<Log> Logs { get; set; } // logs
        public System.Data.Entity.DbSet<LogsHeader> LogsHeaders { get; set; } // Logs_headers
        public System.Data.Entity.DbSet<MarviLhv> MarviLhvs { get; set; } // marvi_lhv
        public System.Data.Entity.DbSet<Menu> Menus { get; set; } // Menu
        public System.Data.Entity.DbSet<MenuLevelAccess> MenuLevelAccesses { get; set; } // MenuLevelAccess
        public System.Data.Entity.DbSet<MultiProjectAppDetail> MultiProjectAppDetails { get; set; } // MultiProjectAppDetails
        public System.Data.Entity.DbSet<Mwra> Mwras { get; set; } // mwra
        public System.Data.Entity.DbSet<MwraCategory> MwraCategories { get; set; } // mwra_categories
        public System.Data.Entity.DbSet<MwraClient> MwraClients { get; set; } // mwra_client
        public System.Data.Entity.DbSet<MwraClientMapping> MwraClientMappings { get; set; } // mwra_clientMapping
        public System.Data.Entity.DbSet<MwraClientSnapshot102021> MwraClientSnapshot102021 { get; set; } // mwra_client_snapshot_10_2021
        public System.Data.Entity.DbSet<NoorChecklist> NoorChecklists { get; set; } // noor_checklist
        public System.Data.Entity.DbSet<Pm> Pms { get; set; } // pms
        public System.Data.Entity.DbSet<Product> Products { get; set; } // products
        public System.Data.Entity.DbSet<Products1> Products1 { get; set; } // products1
        public System.Data.Entity.DbSet<ProjectMenuAccess> ProjectMenuAccesses { get; set; } // ProjectMenuAccess
        public System.Data.Entity.DbSet<ProjectSolution> ProjectSolutions { get; set; } // ProjectSolution
        public System.Data.Entity.DbSet<PushEvent> PushEvents { get; set; } // push_events
        public System.Data.Entity.DbSet<PushMessage> PushMessages { get; set; } // push_messages
        public System.Data.Entity.DbSet<Region> Regions { get; set; } // regions
        public System.Data.Entity.DbSet<RegionsMapping> RegionsMappings { get; set; } // regionsMapping
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // roles
        public System.Data.Entity.DbSet<RoleMenuAccess> RoleMenuAccesses { get; set; } // RoleMenuAccess
        public System.Data.Entity.DbSet<RoleMenuAccessLevelRight> RoleMenuAccessLevelRights { get; set; } // RoleMenuAccessLevelRights
        public System.Data.Entity.DbSet<Session> Sessions { get; set; } // session
        public System.Data.Entity.DbSet<SessionContent> SessionContents { get; set; } // SessionContent
        public System.Data.Entity.DbSet<SessionFollowup> SessionFollowups { get; set; } // session_followup
        public System.Data.Entity.DbSet<SessionInventory> SessionInventories { get; set; } // SessionInventory
        public System.Data.Entity.DbSet<SessionMwra> SessionMwras { get; set; } // session_mwras
        public System.Data.Entity.DbSet<Stock> Stocks { get; set; } // stocks
        public System.Data.Entity.DbSet<Taluqa> Taluqas { get; set; } // taluqa
        public System.Data.Entity.DbSet<TempLog> TempLogs { get; set; } // tempLogs
        public System.Data.Entity.DbSet<TempMwra> TempMwras { get; set; } // temp_mwra
        public System.Data.Entity.DbSet<TestingTable> TestingTables { get; set; } // testingTable
        public System.Data.Entity.DbSet<UnionCouncil> UnionCouncils { get; set; } // union_council
        public System.Data.Entity.DbSet<User> Users { get; set; } // users
        public System.Data.Entity.DbSet<UserMenuAccess> UserMenuAccesses { get; set; } // UserMenuAccess
        public System.Data.Entity.DbSet<UsersStock> UsersStocks { get; set; } // users_stock
        public System.Data.Entity.DbSet<UserType> UserTypes { get; set; } // UserType

        static HandsDBContext()
        {
            System.Data.Entity.Database.SetInitializer<HandsDBContext>(null);
        }

        public HandsDBContext()
            : base("Name=Hands.Web.Properties.Settings.HandsDBConnection")
        {
            InitializePartial();
        }

        public HandsDBContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public HandsDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public HandsDBContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public HandsDBContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccessLevelConfiguration());
            modelBuilder.Configurations.Add(new ApiAuthenticationConfiguration());
            modelBuilder.Configurations.Add(new ApiDuplicateRecordLogConfiguration());
            modelBuilder.Configurations.Add(new ApiErrorLogConfiguration());
            modelBuilder.Configurations.Add(new ApiLogConfiguration());
            modelBuilder.Configurations.Add(new AppMenuConfiguration());
            modelBuilder.Configurations.Add(new AppUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new AssignMenuToAppConfiguration());
            modelBuilder.Configurations.Add(new AssignMenuToProjectConfiguration());
            modelBuilder.Configurations.Add(new AssignRoleToProjectConfiguration());
            modelBuilder.Configurations.Add(new BlmisCategoryConfiguration());
            modelBuilder.Configurations.Add(new BlmisSellHistoryConfiguration());
            modelBuilder.Configurations.Add(new BlmisUserstockConfiguration());
            modelBuilder.Configurations.Add(new CategoryConfiguration());
            modelBuilder.Configurations.Add(new CityConfiguration());
            modelBuilder.Configurations.Add(new ClientChecklistConfiguration());
            modelBuilder.Configurations.Add(new ContentConfiguration());
            modelBuilder.Configurations.Add(new CurrentMrwa20210923Configuration());
            modelBuilder.Configurations.Add(new DeviceConfiguration());
            modelBuilder.Configurations.Add(new InventoryReturnConfiguration());
            modelBuilder.Configurations.Add(new LhvChecklistConfiguration());
            modelBuilder.Configurations.Add(new LogConfiguration());
            modelBuilder.Configurations.Add(new LogsHeaderConfiguration());
            modelBuilder.Configurations.Add(new MarviLhvConfiguration());
            modelBuilder.Configurations.Add(new MenuConfiguration());
            modelBuilder.Configurations.Add(new MenuLevelAccessConfiguration());
            modelBuilder.Configurations.Add(new MultiProjectAppDetailConfiguration());
            modelBuilder.Configurations.Add(new MwraConfiguration());
            modelBuilder.Configurations.Add(new MwraCategoryConfiguration());
            modelBuilder.Configurations.Add(new MwraClientConfiguration());
            modelBuilder.Configurations.Add(new MwraClientMappingConfiguration());
            modelBuilder.Configurations.Add(new MwraClientSnapshot102021Configuration());
            modelBuilder.Configurations.Add(new NoorChecklistConfiguration());
            modelBuilder.Configurations.Add(new PmConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new Products1Configuration());
            modelBuilder.Configurations.Add(new ProjectMenuAccessConfiguration());
            modelBuilder.Configurations.Add(new ProjectSolutionConfiguration());
            modelBuilder.Configurations.Add(new PushEventConfiguration());
            modelBuilder.Configurations.Add(new PushMessageConfiguration());
            modelBuilder.Configurations.Add(new RegionConfiguration());
            modelBuilder.Configurations.Add(new RegionsMappingConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new RoleMenuAccessConfiguration());
            modelBuilder.Configurations.Add(new RoleMenuAccessLevelRightConfiguration());
            modelBuilder.Configurations.Add(new SessionConfiguration());
            modelBuilder.Configurations.Add(new SessionContentConfiguration());
            modelBuilder.Configurations.Add(new SessionFollowupConfiguration());
            modelBuilder.Configurations.Add(new SessionInventoryConfiguration());
            modelBuilder.Configurations.Add(new SessionMwraConfiguration());
            modelBuilder.Configurations.Add(new StockConfiguration());
            modelBuilder.Configurations.Add(new TaluqaConfiguration());
            modelBuilder.Configurations.Add(new TempLogConfiguration());
            modelBuilder.Configurations.Add(new TempMwraConfiguration());
            modelBuilder.Configurations.Add(new TestingTableConfiguration());
            modelBuilder.Configurations.Add(new UnionCouncilConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserMenuAccessConfiguration());
            modelBuilder.Configurations.Add(new UsersStockConfiguration());
            modelBuilder.Configurations.Add(new UserTypeConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccessLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new ApiAuthenticationConfiguration(schema));
            modelBuilder.Configurations.Add(new ApiDuplicateRecordLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ApiErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ApiLogConfiguration(schema));
            modelBuilder.Configurations.Add(new AppMenuConfiguration(schema));
            modelBuilder.Configurations.Add(new AppUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new AssignMenuToAppConfiguration(schema));
            modelBuilder.Configurations.Add(new AssignMenuToProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new AssignRoleToProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new BlmisCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new BlmisSellHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new BlmisUserstockConfiguration(schema));
            modelBuilder.Configurations.Add(new CategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CityConfiguration(schema));
            modelBuilder.Configurations.Add(new ClientChecklistConfiguration(schema));
            modelBuilder.Configurations.Add(new ContentConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrentMrwa20210923Configuration(schema));
            modelBuilder.Configurations.Add(new DeviceConfiguration(schema));
            modelBuilder.Configurations.Add(new InventoryReturnConfiguration(schema));
            modelBuilder.Configurations.Add(new LhvChecklistConfiguration(schema));
            modelBuilder.Configurations.Add(new LogConfiguration(schema));
            modelBuilder.Configurations.Add(new LogsHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new MarviLhvConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuLevelAccessConfiguration(schema));
            modelBuilder.Configurations.Add(new MultiProjectAppDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new MwraConfiguration(schema));
            modelBuilder.Configurations.Add(new MwraCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new MwraClientConfiguration(schema));
            modelBuilder.Configurations.Add(new MwraClientMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new MwraClientSnapshot102021Configuration(schema));
            modelBuilder.Configurations.Add(new NoorChecklistConfiguration(schema));
            modelBuilder.Configurations.Add(new PmConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Products1Configuration(schema));
            modelBuilder.Configurations.Add(new ProjectMenuAccessConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectSolutionConfiguration(schema));
            modelBuilder.Configurations.Add(new PushEventConfiguration(schema));
            modelBuilder.Configurations.Add(new PushMessageConfiguration(schema));
            modelBuilder.Configurations.Add(new RegionConfiguration(schema));
            modelBuilder.Configurations.Add(new RegionsMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleMenuAccessConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleMenuAccessLevelRightConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionContentConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionFollowupConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionMwraConfiguration(schema));
            modelBuilder.Configurations.Add(new StockConfiguration(schema));
            modelBuilder.Configurations.Add(new TaluqaConfiguration(schema));
            modelBuilder.Configurations.Add(new TempLogConfiguration(schema));
            modelBuilder.Configurations.Add(new TempMwraConfiguration(schema));
            modelBuilder.Configurations.Add(new TestingTableConfiguration(schema));
            modelBuilder.Configurations.Add(new UnionCouncilConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserMenuAccessConfiguration(schema));
            modelBuilder.Configurations.Add(new UsersStockConfiguration(schema));
            modelBuilder.Configurations.Add(new UserTypeConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public System.Collections.Generic.List<AccessMenubyRoleIdReturnModel> AccessMenubyRoleId(int? roleId, int? projectId)
        {
            int procResult;
            return AccessMenubyRoleId(roleId, projectId, out procResult);
        }

        public System.Collections.Generic.List<AccessMenubyRoleIdReturnModel> AccessMenubyRoleId(int? roleId, int? projectId, out int procResult)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AccessMenubyRoleIdReturnModel>("EXEC @procResult = [dbo].[AccessMenubyRoleID] @RoleID, @ProjectId", roleIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AccessMenubyRoleIdReturnModel>> AccessMenubyRoleIdAsync(int? roleId, int? projectId)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AccessMenubyRoleIdReturnModel>("EXEC [dbo].[AccessMenubyRoleID] @RoleID, @ProjectId", roleIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ClmisInventoryStatusReturnModel> ClmisInventoryStatus(int? projectId)
        {
            int procResult;
            return ClmisInventoryStatus(projectId, out procResult);
        }

        public System.Collections.Generic.List<ClmisInventoryStatusReturnModel> ClmisInventoryStatus(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ClmisInventoryStatusReturnModel>("EXEC @procResult = [dbo].[CLMISInventoryStatus] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ClmisInventoryStatusReturnModel>> ClmisInventoryStatusAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ClmisInventoryStatusReturnModel>("EXEC [dbo].[CLMISInventoryStatus] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<ClmisTotalMwraReturnModel> ClmisTotalMwra(int? projectId)
        {
            int procResult;
            return ClmisTotalMwra(projectId, out procResult);
        }

        public System.Collections.Generic.List<ClmisTotalMwraReturnModel> ClmisTotalMwra(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ClmisTotalMwraReturnModel>("EXEC @procResult = [dbo].[ClmisTotalMwra] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ClmisTotalMwraReturnModel>> ClmisTotalMwraAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ClmisTotalMwraReturnModel>("EXEC [dbo].[ClmisTotalMwra] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllContentReturnModel> GetAllContent(int? projectId)
        {
            int procResult;
            return GetAllContent(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAllContentReturnModel> GetAllContent(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllContentReturnModel>("EXEC @procResult = [dbo].[GetAllContent] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllContentReturnModel>> GetAllContentAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAllContentReturnModel>("EXEC [dbo].[GetAllContent] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllContentPmsReturnModel> GetAllContentPms(int? projectId)
        {
            int procResult;
            return GetAllContentPms(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAllContentPmsReturnModel> GetAllContentPms(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllContentPmsReturnModel>("EXEC @procResult = [dbo].[GetAllContentPms] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllContentPmsReturnModel>> GetAllContentPmsAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAllContentPmsReturnModel>("EXEC [dbo].[GetAllContentPms] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllLogwithMarviReturnModel> GetAllLogwithMarvi()
        {
            int procResult;
            return GetAllLogwithMarvi(out procResult);
        }

        public System.Collections.Generic.List<GetAllLogwithMarviReturnModel> GetAllLogwithMarvi(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllLogwithMarviReturnModel>("EXEC @procResult = [dbo].[GetAllLogwithMARVI] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllLogwithMarviReturnModel>> GetAllLogwithMarviAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllLogwithMarviReturnModel>("EXEC [dbo].[GetAllLogwithMARVI] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllLogwithNameReturnModel> GetAllLogwithName(int? projectId)
        {
            int procResult;
            return GetAllLogwithName(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAllLogwithNameReturnModel> GetAllLogwithName(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllLogwithNameReturnModel>("EXEC @procResult = [dbo].[GetAllLogwithName] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllLogwithNameReturnModel>> GetAllLogwithNameAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAllLogwithNameReturnModel>("EXEC [dbo].[GetAllLogwithName] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllMiscellenousReturnModel> GetAllMiscellenous()
        {
            int procResult;
            return GetAllMiscellenous(out procResult);
        }

        public System.Collections.Generic.List<GetAllMiscellenousReturnModel> GetAllMiscellenous(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllMiscellenousReturnModel>("EXEC @procResult = [dbo].[GetAllMiscellenous] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMiscellenousReturnModel>> GetAllMiscellenousAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllMiscellenousReturnModel>("EXEC [dbo].[GetAllMiscellenous] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel> GetAllMwraClientWithRelationNames()
        {
            int procResult;
            return GetAllMwraClientWithRelationNames(out procResult);
        }

        public System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel> GetAllMwraClientWithRelationNames(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllMwraClientWithRelationNamesReturnModel>("EXEC @procResult = [dbo].[GetAllMWRAClientWithRelationNames] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwraClientWithRelationNamesReturnModel>> GetAllMwraClientWithRelationNamesAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllMwraClientWithRelationNamesReturnModel>("EXEC [dbo].[GetAllMWRAClientWithRelationNames] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel> GetAllMwrAsByAppUserId(int? appUserId)
        {
            int procResult;
            return GetAllMwrAsByAppUserId(appUserId, out procResult);
        }

        public System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel> GetAllMwrAsByAppUserId(int? appUserId, out int procResult)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllMwrAsByAppUserIdReturnModel>("EXEC @procResult = [dbo].[GetAllMWRAsByAppUserID] @appUserId", appUserIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwrAsByAppUserIdReturnModel>> GetAllMwrAsByAppUserIdAsync(int? appUserId)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAllMwrAsByAppUserIdReturnModel>("EXEC [dbo].[GetAllMWRAsByAppUserID] @appUserId", appUserIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel> GetAllMwraWithAllRelations()
        {
            int procResult;
            return GetAllMwraWithAllRelations(out procResult);
        }

        public System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel> GetAllMwraWithAllRelations(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllMwraWithAllRelationsReturnModel>("EXEC @procResult = [dbo].[GetAllMWRAWithAllRelations] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwraWithAllRelationsReturnModel>> GetAllMwraWithAllRelationsAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllMwraWithAllRelationsReturnModel>("EXEC [dbo].[GetAllMWRAWithAllRelations] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel> GetAllMwraWithRelationNames(int? projectId, int? lhvId, int? marviId)
        {
            int procResult;
            return GetAllMwraWithRelationNames(projectId, lhvId, marviId, out procResult);
        }

        public System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel> GetAllMwraWithRelationNames(int? projectId, int? lhvId, int? marviId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var lhvIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lhvId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lhvId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lhvId.HasValue)
                lhvIdParam.Value = System.DBNull.Value;

            var marviIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@marviId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = marviId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!marviId.HasValue)
                marviIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllMwraWithRelationNamesReturnModel>("EXEC @procResult = [dbo].[GetAllMWRAWithRelationNames] @ProjectId, @lhvId, @marviId", projectIdParam, lhvIdParam, marviIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllMwraWithRelationNamesReturnModel>> GetAllMwraWithRelationNamesAsync(int? projectId, int? lhvId, int? marviId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var lhvIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lhvId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lhvId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lhvId.HasValue)
                lhvIdParam.Value = System.DBNull.Value;

            var marviIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@marviId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = marviId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!marviId.HasValue)
                marviIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAllMwraWithRelationNamesReturnModel>("EXEC [dbo].[GetAllMWRAWithRelationNames] @ProjectId, @lhvId, @marviId", projectIdParam, lhvIdParam, marviIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllProductsReturnModel> GetAllProducts()
        {
            int procResult;
            return GetAllProducts(out procResult);
        }

        public System.Collections.Generic.List<GetAllProductsReturnModel> GetAllProducts(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllProductsReturnModel>("EXEC @procResult = [dbo].[GetAllProducts] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllProductsReturnModel>> GetAllProductsAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllProductsReturnModel>("EXEC [dbo].[GetAllProducts] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllSessionDataReturnModel> GetAllSessionData(int? appUserId, System.DateTime? startDate)
        {
            int procResult;
            return GetAllSessionData(appUserId, startDate, out procResult);
        }

        public System.Collections.Generic.List<GetAllSessionDataReturnModel> GetAllSessionData(int? appUserId, System.DateTime? startDate, out int procResult)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllSessionDataReturnModel>("EXEC @procResult = [dbo].[GetAllSessionData] @appUserId, @StartDate", appUserIdParam, startDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllSessionDataReturnModel>> GetAllSessionDataAsync(int? appUserId, System.DateTime? startDate)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAllSessionDataReturnModel>("EXEC [dbo].[GetAllSessionData] @appUserId, @StartDate", appUserIdParam, startDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAllSessionDataOldReturnModel> GetAllSessionDataOld()
        {
            int procResult;
            return GetAllSessionDataOld(out procResult);
        }

        public System.Collections.Generic.List<GetAllSessionDataOldReturnModel> GetAllSessionDataOld(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAllSessionDataOldReturnModel>("EXEC @procResult = [dbo].[GetAllSessionDataOld] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAllSessionDataOldReturnModel>> GetAllSessionDataOldAsync()
        {
            var procResultData = await Database.SqlQuery<GetAllSessionDataOldReturnModel>("EXEC [dbo].[GetAllSessionDataOld] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAppUserByIdReturnModel> GetAppUserById(int? appuserId, int? projectId)
        {
            int procResult;
            return GetAppUserById(appuserId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetAppUserByIdReturnModel> GetAppUserById(int? appuserId, int? projectId, out int procResult)
        {
            var appuserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appuserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appuserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appuserId.HasValue)
                appuserIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAppUserByIdReturnModel>("EXEC @procResult = [dbo].[GetAppUserById] @appuserId, @ProjectId", appuserIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAppUserByIdReturnModel>> GetAppUserByIdAsync(int? appuserId, int? projectId)
        {
            var appuserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appuserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appuserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appuserId.HasValue)
                appuserIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAppUserByIdReturnModel>("EXEC [dbo].[GetAppUserById] @appuserId, @ProjectId", appuserIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel> GetBlmisSalesByMonth(string startDate, int? projectId)
        {
            int procResult;
            return GetBlmisSalesByMonth(startDate, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel> GetBlmisSalesByMonth(string startDate, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = startDate, Size = 50 };
            if (startDateParam.Value == null)
                startDateParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetBlmisSalesByMonthReturnModel>("EXEC @procResult = [dbo].[GetBlmisSalesByMonth] @StartDate, @ProjectId", startDateParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetBlmisSalesByMonthReturnModel>> GetBlmisSalesByMonthAsync(string startDate, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = startDate, Size = 50 };
            if (startDateParam.Value == null)
                startDateParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetBlmisSalesByMonthReturnModel>("EXEC [dbo].[GetBlmisSalesByMonth] @StartDate, @ProjectId", startDateParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public GetClientlistReturnModel GetClientlist(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;


            var procResultData = new GetClientlistReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetClientlist]";
            cmd.Parameters.Add(regionIdParam);
            cmd.Parameters.Add(projectIdParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetClientlistReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetClientlistReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetClientlistReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetClientlistReturnModel> GetClientlistAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;


            var procResultData = new GetClientlistReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetClientlist]";
            cmd.Parameters.Add(regionIdParam);
            cmd.Parameters.Add(projectIdParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetClientlistReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetClientlistReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetClientlistReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel> GetCurrentUserForEachLhvByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return GetCurrentUserForEachLhvByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel> GetCurrentUserForEachLhvByRegionId(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetCurrentUserForEachLhvByRegionIdReturnModel>("EXEC @procResult = [dbo].[GetCurrentUserForEachLHVByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetCurrentUserForEachLhvByRegionIdReturnModel>> GetCurrentUserForEachLhvByRegionIdAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetCurrentUserForEachLhvByRegionIdReturnModel>("EXEC [dbo].[GetCurrentUserForEachLHVByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetDashboardcountReturnModel> GetDashboardcount(int? projectId)
        {
            int procResult;
            return GetDashboardcount(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetDashboardcountReturnModel> GetDashboardcount(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDashboardcountReturnModel>("EXEC @procResult = [dbo].[GetDashboardcount] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetDashboardcountReturnModel>> GetDashboardcountAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetDashboardcountReturnModel>("EXEC [dbo].[GetDashboardcount] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetfollowupByNamesReturnModel> GetfollowupByNames(int? projectId)
        {
            int procResult;
            return GetfollowupByNames(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetfollowupByNamesReturnModel> GetfollowupByNames(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetfollowupByNamesReturnModel>("EXEC @procResult = [dbo].[GetfollowupByNames] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetfollowupByNamesReturnModel>> GetfollowupByNamesAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetfollowupByNamesReturnModel>("EXEC [dbo].[GetfollowupByNames] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel> GetfollowupByNamesByLhvId(int? lhvId, int? projectId)
        {
            int procResult;
            return GetfollowupByNamesByLhvId(lhvId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel> GetfollowupByNamesByLhvId(int? lhvId, int? projectId, out int procResult)
        {
            var lhvIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LhvId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lhvId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lhvId.HasValue)
                lhvIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetfollowupByNamesByLhvIdReturnModel>("EXEC @procResult = [dbo].[GetfollowupByNamesByLhvId] @LhvId, @ProjectId", lhvIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetfollowupByNamesByLhvIdReturnModel>> GetfollowupByNamesByLhvIdAsync(int? lhvId, int? projectId)
        {
            var lhvIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LhvId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lhvId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lhvId.HasValue)
                lhvIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetfollowupByNamesByLhvIdReturnModel>("EXEC [dbo].[GetfollowupByNamesByLhvId] @LhvId, @ProjectId", lhvIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetFutureSessionDataReturnModel> GetFutureSessionData(int? appUserId, System.DateTime? startDate, int? projectId)
        {
            int procResult;
            return GetFutureSessionData(appUserId, startDate, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetFutureSessionDataReturnModel> GetFutureSessionData(int? appUserId, System.DateTime? startDate, int? projectId, out int procResult)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetFutureSessionDataReturnModel>("EXEC @procResult = [dbo].[GetFutureSessionData] @appUserId, @StartDate, @ProjectId", appUserIdParam, startDateParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetFutureSessionDataReturnModel>> GetFutureSessionDataAsync(int? appUserId, System.DateTime? startDate, int? projectId)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetFutureSessionDataReturnModel>("EXEC [dbo].[GetFutureSessionData] @appUserId, @StartDate, @ProjectId", appUserIdParam, startDateParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel> GetlhvMavraCountByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return GetlhvMavraCountByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel> GetlhvMavraCountByRegionId(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetlhvMavraCountByRegionIdReturnModel>("EXEC @procResult = [dbo].[GetlhvMavraCountByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetlhvMavraCountByRegionIdReturnModel>> GetlhvMavraCountByRegionIdAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetlhvMavraCountByRegionIdReturnModel>("EXEC [dbo].[GetlhvMavraCountByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel> GetMwraByIdWithNames(int? mwraId)
        {
            int procResult;
            return GetMwraByIdWithNames(mwraId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel> GetMwraByIdWithNames(int? mwraId, out int procResult)
        {
            var mwraIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwra_Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraId.HasValue)
                mwraIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMwraByIdWithNamesReturnModel>("EXEC @procResult = [dbo].[GetMWRAByIDWithNames] @mwra_Id", mwraIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraByIdWithNamesReturnModel>> GetMwraByIdWithNamesAsync(int? mwraId)
        {
            var mwraIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwra_Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraId.HasValue)
                mwraIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMwraByIdWithNamesReturnModel>("EXEC [dbo].[GetMWRAByIDWithNames] @mwra_Id", mwraIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel> GetMwraClienNametByMwraId(int? mwraId)
        {
            int procResult;
            return GetMwraClienNametByMwraId(mwraId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel> GetMwraClienNametByMwraId(int? mwraId, out int procResult)
        {
            var mwraIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraId.HasValue)
                mwraIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMwraClienNametByMwraIdReturnModel>("EXEC @procResult = [dbo].[GetMwraClienNametByMwraId] @mwraId", mwraIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraClienNametByMwraIdReturnModel>> GetMwraClienNametByMwraIdAsync(int? mwraId)
        {
            var mwraIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraId.HasValue)
                mwraIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMwraClienNametByMwraIdReturnModel>("EXEC [dbo].[GetMwraClienNametByMwraId] @mwraId", mwraIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetMwraClienWithNameReturnModel> GetMwraClienWithName(int? appUserId, int? projectId)
        {
            int procResult;
            return GetMwraClienWithName(appUserId, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraClienWithNameReturnModel> GetMwraClienWithName(int? appUserId, int? projectId, out int procResult)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMwraClienWithNameReturnModel>("EXEC @procResult = [dbo].[GetMwraClienWithName] @appUserId, @ProjectId", appUserIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraClienWithNameReturnModel>> GetMwraClienWithNameAsync(int? appUserId, int? projectId)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMwraClienWithNameReturnModel>("EXEC [dbo].[GetMwraClienWithName] @appUserId, @ProjectId", appUserIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel> GetMwraNamesBySessionId(int? sessionId)
        {
            int procResult;
            return GetMwraNamesBySessionId(sessionId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel> GetMwraNamesBySessionId(int? sessionId, out int procResult)
        {
            var sessionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SessionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionId.HasValue)
                sessionIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMwraNamesBySessionIdReturnModel>("EXEC @procResult = [dbo].[GetMWRANamesBySessionId] @SessionId", sessionIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraNamesBySessionIdReturnModel>> GetMwraNamesBySessionIdAsync(int? sessionId)
        {
            var sessionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SessionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionId.HasValue)
                sessionIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMwraNamesBySessionIdReturnModel>("EXEC [dbo].[GetMWRANamesBySessionId] @SessionId", sessionIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetMwraSessionReturnModel> GetMwraSession(int? projectId)
        {
            int procResult;
            return GetMwraSession(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetMwraSessionReturnModel> GetMwraSession(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMwraSessionReturnModel>("EXEC @procResult = [dbo].[GetMwraSession] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMwraSessionReturnModel>> GetMwraSessionAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMwraSessionReturnModel>("EXEC [dbo].[GetMwraSession] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetNoorClientCheckListingReturnModel> GetNoorClientCheckListing(int? noorChecklistId)
        {
            int procResult;
            return GetNoorClientCheckListing(noorChecklistId, out procResult);
        }

        public System.Collections.Generic.List<GetNoorClientCheckListingReturnModel> GetNoorClientCheckListing(int? noorChecklistId, out int procResult)
        {
            var noorChecklistIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@noor_checklist_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = noorChecklistId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!noorChecklistId.HasValue)
                noorChecklistIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetNoorClientCheckListingReturnModel>("EXEC @procResult = [dbo].[GetNoorClientCheckListing] @noor_checklist_id", noorChecklistIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetNoorClientCheckListingReturnModel>> GetNoorClientCheckListingAsync(int? noorChecklistId)
        {
            var noorChecklistIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@noor_checklist_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = noorChecklistId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!noorChecklistId.HasValue)
                noorChecklistIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetNoorClientCheckListingReturnModel>("EXEC [dbo].[GetNoorClientCheckListing] @noor_checklist_id", noorChecklistIdParam).ToListAsync();

            return procResultData;
        }

        public int GetPortalUsers()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetPortalUsers] ", procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetProductByUserIdReturnModel> GetProductByUserId(int? userId, int? projectId, int? regionId)
        {
            int procResult;
            return GetProductByUserId(userId, projectId, regionId, out procResult);
        }

        public System.Collections.Generic.List<GetProductByUserIdReturnModel> GetProductByUserId(int? userId, int? projectId, int? regionId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetProductByUserIdReturnModel>("EXEC @procResult = [dbo].[GetProductByUserId] @userId, @projectId, @regionId", userIdParam, projectIdParam, regionIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetProductByUserIdReturnModel>> GetProductByUserIdAsync(int? userId, int? projectId, int? regionId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetProductByUserIdReturnModel>("EXEC [dbo].[GetProductByUserId] @userId, @projectId, @regionId", userIdParam, projectIdParam, regionIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetProductListReturnModel> GetProductList()
        {
            int procResult;
            return GetProductList(out procResult);
        }

        public System.Collections.Generic.List<GetProductListReturnModel> GetProductList(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetProductListReturnModel>("EXEC @procResult = [dbo].[GetProductList] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetProductListReturnModel>> GetProductListAsync()
        {
            var procResultData = await Database.SqlQuery<GetProductListReturnModel>("EXEC [dbo].[GetProductList] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel> GetQuantityByUserIdAndProductId(int? userId, int? productId)
        {
            int procResult;
            return GetQuantityByUserIdAndProductId(userId, productId, out procResult);
        }

        public System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel> GetQuantityByUserIdAndProductId(int? userId, int? productId, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@productId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetQuantityByUserIdAndProductIdReturnModel>("EXEC @procResult = [dbo].[GetQuantityByUserIdAndProductId] @userId, @productId", userIdParam, productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetQuantityByUserIdAndProductIdReturnModel>> GetQuantityByUserIdAndProductIdAsync(int? userId, int? productId)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@productId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetQuantityByUserIdAndProductIdReturnModel>("EXEC [dbo].[GetQuantityByUserIdAndProductId] @userId, @productId", userIdParam, productIdParam).ToListAsync();

            return procResultData;
        }

        public GetRealtimeChecklistReturnModel GetRealtimeChecklist(int? visitorId, int? regionId, int? projectId)
        {
            var visitorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@VisitorId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = visitorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!visitorId.HasValue)
                visitorIdParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;


            var procResultData = new GetRealtimeChecklistReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetRealtimeChecklist]";
            cmd.Parameters.Add(visitorIdParam);
            cmd.Parameters.Add(regionIdParam);
            cmd.Parameters.Add(projectIdParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetRealtimeChecklistReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetRealtimeChecklistReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetRealtimeChecklistReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetRealtimeChecklistReturnModel> GetRealtimeChecklistAsync(int? visitorId, int? regionId, int? projectId)
        {
            var visitorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@VisitorId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = visitorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!visitorId.HasValue)
                visitorIdParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@regionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;


            var procResultData = new GetRealtimeChecklistReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetRealtimeChecklist]";
            cmd.Parameters.Add(visitorIdParam);
            cmd.Parameters.Add(regionIdParam);
            cmd.Parameters.Add(projectIdParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetRealtimeChecklistReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetRealtimeChecklistReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetRealtimeChecklistReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public System.Collections.Generic.List<GetRoleByProjectReturnModel> GetRoleByProject(int? projectId)
        {
            int procResult;
            return GetRoleByProject(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetRoleByProjectReturnModel> GetRoleByProject(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoleByProjectReturnModel>("EXEC @procResult = [dbo].[GetRoleByProject] @projectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoleByProjectReturnModel>> GetRoleByProjectAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoleByProjectReturnModel>("EXEC [dbo].[GetRoleByProject] @projectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetSessionCallListReturnModel> GetSessionCallList(int? projectId)
        {
            int procResult;
            return GetSessionCallList(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetSessionCallListReturnModel> GetSessionCallList(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetSessionCallListReturnModel>("EXEC @procResult = [dbo].[GetSessionCallList] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetSessionCallListReturnModel>> GetSessionCallListAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetSessionCallListReturnModel>("EXEC [dbo].[GetSessionCallList] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetSessionCallmarviListReturnModel> GetSessionCallmarviList(int? projectId)
        {
            int procResult;
            return GetSessionCallmarviList(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetSessionCallmarviListReturnModel> GetSessionCallmarviList(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetSessionCallmarviListReturnModel>("EXEC @procResult = [dbo].[GetSessionCallmarviList] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetSessionCallmarviListReturnModel>> GetSessionCallmarviListAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetSessionCallmarviListReturnModel>("EXEC [dbo].[GetSessionCallmarviList] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetSheduleActivityListReturnModel> GetSheduleActivityList(int? projectId)
        {
            int procResult;
            return GetSheduleActivityList(projectId, out procResult);
        }

        public System.Collections.Generic.List<GetSheduleActivityListReturnModel> GetSheduleActivityList(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetSheduleActivityListReturnModel>("EXEC @procResult = [dbo].[GetSheduleActivityList] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetSheduleActivityListReturnModel>> GetSheduleActivityListAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetSheduleActivityListReturnModel>("EXEC [dbo].[GetSheduleActivityList] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetStockQuantityReturnModel> GetStockQuantity(int? productId)
        {
            int procResult;
            return GetStockQuantity(productId, out procResult);
        }

        public System.Collections.Generic.List<GetStockQuantityReturnModel> GetStockQuantity(int? productId, out int procResult)
        {
            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@productId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetStockQuantityReturnModel>("EXEC @procResult = [dbo].[GetStockQuantity] @productId", productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetStockQuantityReturnModel>> GetStockQuantityAsync(int? productId)
        {
            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@productId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetStockQuantityReturnModel>("EXEC [dbo].[GetStockQuantity] @productId", productIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetUsersByUserTypeReturnModel> GetUsersByUserType(string userType, int? projectId)
        {
            int procResult;
            return GetUsersByUserType(userType, projectId, out procResult);
        }

        public System.Collections.Generic.List<GetUsersByUserTypeReturnModel> GetUsersByUserType(string userType, int? projectId, out int procResult)
        {
            var userTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userType, Size = 50 };
            if (userTypeParam.Value == null)
                userTypeParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetUsersByUserTypeReturnModel>("EXEC @procResult = [dbo].[GetUsersByUserType] @UserType, @ProjectId", userTypeParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetUsersByUserTypeReturnModel>> GetUsersByUserTypeAsync(string userType, int? projectId)
        {
            var userTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userType, Size = 50 };
            if (userTypeParam.Value == null)
                userTypeParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetUsersByUserTypeReturnModel>("EXEC [dbo].[GetUsersByUserType] @UserType, @ProjectId", userTypeParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<HcpListingWithNamesReturnModel> HcpListingWithNames(string userType, int? projectId)
        {
            int procResult;
            return HcpListingWithNames(userType, projectId, out procResult);
        }

        public System.Collections.Generic.List<HcpListingWithNamesReturnModel> HcpListingWithNames(string userType, int? projectId, out int procResult)
        {
            var userTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userType, Size = 250 };
            if (userTypeParam.Value == null)
                userTypeParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<HcpListingWithNamesReturnModel>("EXEC @procResult = [dbo].[HcpListingWithNames] @userType, @ProjectId", userTypeParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<HcpListingWithNamesReturnModel>> HcpListingWithNamesAsync(string userType, int? projectId)
        {
            var userTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userType", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = userType, Size = 250 };
            if (userTypeParam.Value == null)
                userTypeParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<HcpListingWithNamesReturnModel>("EXEC [dbo].[HcpListingWithNames] @userType, @ProjectId", userTypeParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<MarviClientGenerationReportReturnModel> MarviClientGenerationReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return MarviClientGenerationReport(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<MarviClientGenerationReportReturnModel> MarviClientGenerationReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<MarviClientGenerationReportReturnModel>("EXEC @procResult = [dbo].[MarviClientGenerationReport] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<MarviClientGenerationReportReturnModel>> MarviClientGenerationReportAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<MarviClientGenerationReportReturnModel>("EXEC [dbo].[MarviClientGenerationReport] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel> MwraForEachLhvByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return MwraForEachLhvByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel> MwraForEachLhvByRegionId(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<MwraForEachLhvByRegionIdReturnModel>("EXEC @procResult = [dbo].[MwraForEachLHVByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<MwraForEachLhvByRegionIdReturnModel>> MwraForEachLhvByRegionIdAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<MwraForEachLhvByRegionIdReturnModel>("EXEC [dbo].[MwraForEachLHVByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<NewUserCurrentMonthReturnModel> NewUserCurrentMonth(int? projectId)
        {
            int procResult;
            return NewUserCurrentMonth(projectId, out procResult);
        }

        public System.Collections.Generic.List<NewUserCurrentMonthReturnModel> NewUserCurrentMonth(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<NewUserCurrentMonthReturnModel>("EXEC @procResult = [dbo].[NewUserCurrentMonth] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<NewUserCurrentMonthReturnModel>> NewUserCurrentMonthAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<NewUserCurrentMonthReturnModel>("EXEC [dbo].[NewUserCurrentMonth] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel> NewUserCurrentMonthByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return NewUserCurrentMonthByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel> NewUserCurrentMonthByRegionId(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<NewUserCurrentMonthByRegionIdReturnModel>("EXEC @procResult = [dbo].[NewUserCurrentMonthByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<NewUserCurrentMonthByRegionIdReturnModel>> NewUserCurrentMonthByRegionIdAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<NewUserCurrentMonthByRegionIdReturnModel>("EXEC [dbo].[NewUserCurrentMonthByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel> NewUserEachLhvByRegionId(int? regionId, int? projectId)
        {
            int procResult;
            return NewUserEachLhvByRegionId(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel> NewUserEachLhvByRegionId(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<NewUserEachLhvByRegionIdReturnModel>("EXEC @procResult = [dbo].[NewUserEachLHVByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<NewUserEachLhvByRegionIdReturnModel>> NewUserEachLhvByRegionIdAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<NewUserEachLhvByRegionIdReturnModel>("EXEC [dbo].[NewUserEachLHVByRegionId] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<NoorCheckListReturnModel> NoorCheckList(int? projectId)
        {
            int procResult;
            return NoorCheckList(projectId, out procResult);
        }

        public System.Collections.Generic.List<NoorCheckListReturnModel> NoorCheckList(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<NoorCheckListReturnModel>("EXEC @procResult = [dbo].[NoorCheckList] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<NoorCheckListReturnModel>> NoorCheckListAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<NoorCheckListReturnModel>("EXEC [dbo].[NoorCheckList] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpAliveChildReturnModel> SpAliveChild(int? projectId, System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return SpAliveChild(projectId, startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<SpAliveChildReturnModel> SpAliveChild(int? projectId, System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpAliveChildReturnModel>("EXEC @procResult = [dbo].[SpAliveChild] @ProjectId, @StartDate, @EndDate", projectIdParam, startDateParam, endDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpAliveChildReturnModel>> SpAliveChildAsync(int? projectId, System.DateTime? startDate, System.DateTime? endDate)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpAliveChildReturnModel>("EXEC [dbo].[SpAliveChild] @ProjectId, @StartDate, @EndDate", projectIdParam, startDateParam, endDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpAssignRoleToProjectReturnModel> SpAssignRoleToProject()
        {
            int procResult;
            return SpAssignRoleToProject(out procResult);
        }

        public System.Collections.Generic.List<SpAssignRoleToProjectReturnModel> SpAssignRoleToProject(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpAssignRoleToProjectReturnModel>("EXEC @procResult = [dbo].[SpAssignRoleToProject] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpAssignRoleToProjectReturnModel>> SpAssignRoleToProjectAsync()
        {
            var procResultData = await Database.SqlQuery<SpAssignRoleToProjectReturnModel>("EXEC [dbo].[SpAssignRoleToProject] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBlmisInventoryReturnModel> SpBlmisInventory(int? projectId)
        {
            int procResult;
            return SpBlmisInventory(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpBlmisInventoryReturnModel> SpBlmisInventory(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBlmisInventoryReturnModel>("EXEC @procResult = [dbo].[spBlmisInventory] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBlmisInventoryReturnModel>> SpBlmisInventoryAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBlmisInventoryReturnModel>("EXEC [dbo].[spBlmisInventory] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBlmisSellsReturnModel> SpBlmisSells(int? projectId, int? marviId)
        {
            int procResult;
            return SpBlmisSells(projectId, marviId, out procResult);
        }

        public System.Collections.Generic.List<SpBlmisSellsReturnModel> SpBlmisSells(int? projectId, int? marviId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var marviIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@marviId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = marviId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!marviId.HasValue)
                marviIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBlmisSellsReturnModel>("EXEC @procResult = [dbo].[spBlmisSells] @ProjectId, @marviId", projectIdParam, marviIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBlmisSellsReturnModel>> SpBlmisSellsAsync(int? projectId, int? marviId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var marviIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@marviId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = marviId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!marviId.HasValue)
                marviIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBlmisSellsReturnModel>("EXEC [dbo].[spBlmisSells] @ProjectId, @marviId", projectIdParam, marviIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpBlmisUserStockReturnModel> SpBlmisUserStock(int? projectId, int? marviId)
        {
            int procResult;
            return SpBlmisUserStock(projectId, marviId, out procResult);
        }

        public System.Collections.Generic.List<SpBlmisUserStockReturnModel> SpBlmisUserStock(int? projectId, int? marviId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var marviIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MarviId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = marviId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!marviId.HasValue)
                marviIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpBlmisUserStockReturnModel>("EXEC @procResult = [dbo].[spBLMISUserStock] @ProjectId, @MarviId", projectIdParam, marviIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpBlmisUserStockReturnModel>> SpBlmisUserStockAsync(int? projectId, int? marviId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var marviIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MarviId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = marviId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!marviId.HasValue)
                marviIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpBlmisUserStockReturnModel>("EXEC [dbo].[spBLMISUserStock] @ProjectId, @MarviId", projectIdParam, marviIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpClientCheckListReturnModel> SpClientCheckList(int? projectId)
        {
            int procResult;
            return SpClientCheckList(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpClientCheckListReturnModel> SpClientCheckList(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpClientCheckListReturnModel>("EXEC @procResult = [dbo].[SpClientCheckList] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpClientCheckListReturnModel>> SpClientCheckListAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpClientCheckListReturnModel>("EXEC [dbo].[SpClientCheckList] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpClmisHandStockReturnModel> SpClmisHandStock(int? projectId)
        {
            int procResult;
            return SpClmisHandStock(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpClmisHandStockReturnModel> SpClmisHandStock(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpClmisHandStockReturnModel>("EXEC @procResult = [dbo].[SpClmisHandStock] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpClmisHandStockReturnModel>> SpClmisHandStockAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpClmisHandStockReturnModel>("EXEC [dbo].[SpClmisHandStock] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpClmisInventoryReturnModel> SpClmisInventory(int? projectId)
        {
            int procResult;
            return SpClmisInventory(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpClmisInventoryReturnModel> SpClmisInventory(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpClmisInventoryReturnModel>("EXEC @procResult = [dbo].[spClmisInventory] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpClmisInventoryReturnModel>> SpClmisInventoryAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpClmisInventoryReturnModel>("EXEC [dbo].[spClmisInventory] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public int SpClmisLhvDetail()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SpClmisLhvDetail] ", procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpClmisLhvDetails()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SpClmisLhvDetails] ", procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SpContentcmsReturnModel> SpContentcms(int? projectId)
        {
            int procResult;
            return SpContentcms(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContentcmsReturnModel> SpContentcms(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpContentcmsReturnModel>("EXEC @procResult = [dbo].[spContentcms] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpContentcmsReturnModel>> SpContentcmsAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpContentcmsReturnModel>("EXEC [dbo].[spContentcms] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpContentpmsReturnModel> SpContentpms(int? projectId)
        {
            int procResult;
            return SpContentpms(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContentpmsReturnModel> SpContentpms(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpContentpmsReturnModel>("EXEC @procResult = [dbo].[spContentpms] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpContentpmsReturnModel>> SpContentpmsAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpContentpmsReturnModel>("EXEC [dbo].[spContentpms] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingReturnModel> SpContinuedUserClientListing(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpContinuedUserClientListing(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingReturnModel> SpContinuedUserClientListing(int? mwraclientId, int? projectId, out int procResult)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpContinuedUserClientListingReturnModel>("EXEC @procResult = [dbo].[SpContinuedUserClientListing] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpContinuedUserClientListingReturnModel>> SpContinuedUserClientListingAsync(int? mwraclientId, int? projectId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpContinuedUserClientListingReturnModel>("EXEC [dbo].[SpContinuedUserClientListing] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel> SpContinuedUserClientListingCsv(int? projectId)
        {
            int procResult;
            return SpContinuedUserClientListingCsv(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel> SpContinuedUserClientListingCsv(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpContinuedUserClientListingCsvReturnModel>("EXEC @procResult = [dbo].[SpContinuedUserClientListingCSV] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpContinuedUserClientListingCsvReturnModel>> SpContinuedUserClientListingCsvAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpContinuedUserClientListingCsvReturnModel>("EXEC [dbo].[SpContinuedUserClientListingCSV] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel> SpCurrentUserMethodWise(int? projectId)
        {
            int procResult;
            return SpCurrentUserMethodWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel> SpCurrentUserMethodWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpCurrentUserMethodWiseReturnModel>("EXEC @procResult = [dbo].[SpCurrentUserMethodWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpCurrentUserMethodWiseReturnModel>> SpCurrentUserMethodWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpCurrentUserMethodWiseReturnModel>("EXEC [dbo].[SpCurrentUserMethodWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpDetailMcprReturnModel> SpDetailMcpr(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpDetailMcpr(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpDetailMcprReturnModel> SpDetailMcpr(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpDetailMcprReturnModel>("EXEC @procResult = [dbo].[SpDetailMcpr] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpDetailMcprReturnModel>> SpDetailMcprAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpDetailMcprReturnModel>("EXEC [dbo].[SpDetailMcpr] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel> SpFpUsersTaluqaTehsilwise(System.DateTime? startDate, System.DateTime? endDate, int? projectId)
        {
            int procResult;
            return SpFpUsersTaluqaTehsilwise(startDate, endDate, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel> SpFpUsersTaluqaTehsilwise(System.DateTime? startDate, System.DateTime? endDate, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpFpUsersTaluqaTehsilwiseReturnModel>("EXEC @procResult = [dbo].[SpFpUsersTaluqaTehsilwise] @StartDate, @EndDate, @ProjectId", startDateParam, endDateParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpFpUsersTaluqaTehsilwiseReturnModel>> SpFpUsersTaluqaTehsilwiseAsync(System.DateTime? startDate, System.DateTime? endDate, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpFpUsersTaluqaTehsilwiseReturnModel>("EXEC [dbo].[SpFpUsersTaluqaTehsilwise] @StartDate, @EndDate, @ProjectId", startDateParam, endDateParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel> SpGetAllInventoryByUserId(int? projectId, int? userId)
        {
            int procResult;
            return SpGetAllInventoryByUserId(projectId, userId, out procResult);
        }

        public System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel> SpGetAllInventoryByUserId(int? projectId, int? userId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetAllInventoryByUserIdReturnModel>("EXEC @procResult = [dbo].[SpGetAllInventoryByUserId] @ProjectId, @userId", projectIdParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetAllInventoryByUserIdReturnModel>> SpGetAllInventoryByUserIdAsync(int? projectId, int? userId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@userId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetAllInventoryByUserIdReturnModel>("EXEC [dbo].[SpGetAllInventoryByUserId] @ProjectId, @userId", projectIdParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel> SpGetAllMarviWithNames(int? projectId)
        {
            int procResult;
            return SpGetAllMarviWithNames(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel> SpGetAllMarviWithNames(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetAllMarviWithNamesReturnModel>("EXEC @procResult = [dbo].[spGetAllMarviWithNames] @projectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetAllMarviWithNamesReturnModel>> SpGetAllMarviWithNamesAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetAllMarviWithNamesReturnModel>("EXEC [dbo].[spGetAllMarviWithNames] @projectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel> SpGetAppBibProductsWithCategories(int? projectId)
        {
            int procResult;
            return SpGetAppBibProductsWithCategories(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel> SpGetAppBibProductsWithCategories(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetAppBibProductsWithCategoriesReturnModel>("EXEC @procResult = [dbo].[spGetAppBIBProductsWithCategories] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetAppBibProductsWithCategoriesReturnModel>> SpGetAppBibProductsWithCategoriesAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetAppBibProductsWithCategoriesReturnModel>("EXEC [dbo].[spGetAppBIBProductsWithCategories] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetGeoLocationReturnModel> SpGetGeoLocation()
        {
            int procResult;
            return SpGetGeoLocation(out procResult);
        }

        public System.Collections.Generic.List<SpGetGeoLocationReturnModel> SpGetGeoLocation(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetGeoLocationReturnModel>("EXEC @procResult = [dbo].[SPGetGeoLocation] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetGeoLocationReturnModel>> SpGetGeoLocationAsync()
        {
            var procResultData = await Database.SqlQuery<SpGetGeoLocationReturnModel>("EXEC [dbo].[SPGetGeoLocation] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel> SpGetMwraByLhvIdwithmwraCount(int? lhvId, int? projectId)
        {
            int procResult;
            return SpGetMwraByLhvIdwithmwraCount(lhvId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel> SpGetMwraByLhvIdwithmwraCount(int? lhvId, int? projectId, out int procResult)
        {
            var lhvIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lhvId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lhvId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lhvId.HasValue)
                lhvIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetMwraByLhvIdwithmwraCountReturnModel>("EXEC @procResult = [dbo].[spGetMwraByLhvIdwithmwraCount] @lhvId, @ProjectId", lhvIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetMwraByLhvIdwithmwraCountReturnModel>> SpGetMwraByLhvIdwithmwraCountAsync(int? lhvId, int? projectId)
        {
            var lhvIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@lhvId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lhvId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lhvId.HasValue)
                lhvIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetMwraByLhvIdwithmwraCountReturnModel>("EXEC [dbo].[spGetMwraByLhvIdwithmwraCount] @lhvId, @ProjectId", lhvIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetProjectDetailsReturnModel> SpGetProjectDetails()
        {
            int procResult;
            return SpGetProjectDetails(out procResult);
        }

        public System.Collections.Generic.List<SpGetProjectDetailsReturnModel> SpGetProjectDetails(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetProjectDetailsReturnModel>("EXEC @procResult = [dbo].[spGetProjectDetails] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetProjectDetailsReturnModel>> SpGetProjectDetailsAsync()
        {
            var procResultData = await Database.SqlQuery<SpGetProjectDetailsReturnModel>("EXEC [dbo].[spGetProjectDetails] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel> SpGetRolesByProjectId(int? projectId)
        {
            int procResult;
            return SpGetRolesByProjectId(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel> SpGetRolesByProjectId(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetRolesByProjectIdReturnModel>("EXEC @procResult = [dbo].[spGetRolesByProjectId] @projectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetRolesByProjectIdReturnModel>> SpGetRolesByProjectIdAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetRolesByProjectIdReturnModel>("EXEC [dbo].[spGetRolesByProjectId] @projectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpInventoryReturnReturnModel> SpInventoryReturn(int? projectId)
        {
            int procResult;
            return SpInventoryReturn(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpInventoryReturnReturnModel> SpInventoryReturn(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpInventoryReturnReturnModel>("EXEC @procResult = [dbo].[spInventoryReturn] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpInventoryReturnReturnModel>> SpInventoryReturnAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpInventoryReturnReturnModel>("EXEC [dbo].[spInventoryReturn] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLhvCheckListReturnModel> SpLhvCheckList(int? projectId)
        {
            int procResult;
            return SpLhvCheckList(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLhvCheckListReturnModel> SpLhvCheckList(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLhvCheckListReturnModel>("EXEC @procResult = [dbo].[SpLhvCheckList] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLhvCheckListReturnModel>> SpLhvCheckListAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLhvCheckListReturnModel>("EXEC [dbo].[SpLhvCheckList] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLhvDetailsReturnModel> SpLhvDetails(int? regionId, int? projectId)
        {
            int procResult;
            return SpLhvDetails(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLhvDetailsReturnModel> SpLhvDetails(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLhvDetailsReturnModel>("EXEC @procResult = [dbo].[spLhvDetails] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLhvDetailsReturnModel>> SpLhvDetailsAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLhvDetailsReturnModel>("EXEC [dbo].[spLhvDetails] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel> SpLiveProgressForVisitInCommunityDaysWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitInCommunityDaysWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel> SpLiveProgressForVisitInCommunityDaysWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLiveProgressForVisitInCommunityDaysWiseReturnModel>("EXEC @procResult = [dbo].[spLiveProgressForVisitInCommunityDaysWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitInCommunityDaysWiseReturnModel>> SpLiveProgressForVisitInCommunityDaysWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLiveProgressForVisitInCommunityDaysWiseReturnModel>("EXEC [dbo].[spLiveProgressForVisitInCommunityDaysWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitInCommunityMonthsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitInCommunityMonthsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitInCommunityMonthsWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel>("EXEC @procResult = [dbo].[spLiveProgressForVisitInCommunityMonthsWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel>> SpLiveProgressForVisitInCommunityMonthsWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLiveProgressForVisitInCommunityMonthsWiseReturnModel>("EXEC [dbo].[spLiveProgressForVisitInCommunityMonthsWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel> SpLiveProgressForVisitInCommunityYearsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitInCommunityYearsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel> SpLiveProgressForVisitInCommunityYearsWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLiveProgressForVisitInCommunityYearsWiseReturnModel>("EXEC @procResult = [dbo].[spLiveProgressForVisitInCommunityYearsWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitInCommunityYearsWiseReturnModel>> SpLiveProgressForVisitInCommunityYearsWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLiveProgressForVisitInCommunityYearsWiseReturnModel>("EXEC [dbo].[spLiveProgressForVisitInCommunityYearsWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel> SpLiveProgressForVisitMarviInCommunityDaysWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitMarviInCommunityDaysWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel> SpLiveProgressForVisitMarviInCommunityDaysWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel>("EXEC @procResult = [dbo].[spLiveProgressForVisitMarviInCommunityDaysWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel>> SpLiveProgressForVisitMarviInCommunityDaysWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLiveProgressForVisitMarviInCommunityDaysWiseReturnModel>("EXEC [dbo].[spLiveProgressForVisitMarviInCommunityDaysWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityMonthsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitMarviInCommunityMonthsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityMonthsWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel>("EXEC @procResult = [dbo].[spLiveProgressForVisitMarviInCommunityMonthsWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel>> SpLiveProgressForVisitMarviInCommunityMonthsWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLiveProgressForVisitMarviInCommunityMonthsWiseReturnModel>("EXEC [dbo].[spLiveProgressForVisitMarviInCommunityMonthsWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityYearsWise(int? projectId)
        {
            int procResult;
            return SpLiveProgressForVisitMarviInCommunityYearsWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel> SpLiveProgressForVisitMarviInCommunityYearsWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel>("EXEC @procResult = [dbo].[spLiveProgressForVisitMarviInCommunityYearsWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel>> SpLiveProgressForVisitMarviInCommunityYearsWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLiveProgressForVisitMarviInCommunityYearsWiseReturnModel>("EXEC [dbo].[spLiveProgressForVisitMarviInCommunityYearsWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel> SpMcprTaluqaWise(int? projectId)
        {
            int procResult;
            return SpMcprTaluqaWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel> SpMcprTaluqaWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMcprTaluqaWiseReturnModel>("EXEC @procResult = [dbo].[SpMcprTaluqaWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMcprTaluqaWiseReturnModel>> SpMcprTaluqaWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMcprTaluqaWiseReturnModel>("EXEC [dbo].[SpMcprTaluqaWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMissedSessionDateReturnModel> SpMissedSessionDate()
        {
            int procResult;
            return SpMissedSessionDate(out procResult);
        }

        public System.Collections.Generic.List<SpMissedSessionDateReturnModel> SpMissedSessionDate(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMissedSessionDateReturnModel>("EXEC @procResult = [dbo].[spMissedSessionDate] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMissedSessionDateReturnModel>> SpMissedSessionDateAsync()
        {
            var procResultData = await Database.SqlQuery<SpMissedSessionDateReturnModel>("EXEC [dbo].[spMissedSessionDate] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel> SpMissedSessionsWithMwraNames(int? projectId)
        {
            int procResult;
            return SpMissedSessionsWithMwraNames(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel> SpMissedSessionsWithMwraNames(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMissedSessionsWithMwraNamesReturnModel>("EXEC @procResult = [dbo].[spMissedSessionsWithMwraNames] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMissedSessionsWithMwraNamesReturnModel>> SpMissedSessionsWithMwraNamesAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMissedSessionsWithMwraNamesReturnModel>("EXEC [dbo].[spMissedSessionsWithMwraNames] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel> SpMultiProjectAppDetails(int? projectId)
        {
            int procResult;
            return SpMultiProjectAppDetails(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel> SpMultiProjectAppDetails(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMultiProjectAppDetailsReturnModel>("EXEC @procResult = [dbo].[SpMultiProjectAppDetails] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMultiProjectAppDetailsReturnModel>> SpMultiProjectAppDetailsAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMultiProjectAppDetailsReturnModel>("EXEC [dbo].[SpMultiProjectAppDetails] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwraClientListingCsvReturnModel> SpMwraClientListingCsv(int? projectId)
        {
            int procResult;
            return SpMwraClientListingCsv(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraClientListingCsvReturnModel> SpMwraClientListingCsv(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwraClientListingCsvReturnModel>("EXEC @procResult = [dbo].[SpMwraClientListingCSV] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraClientListingCsvReturnModel>> SpMwraClientListingCsvAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwraClientListingCsvReturnModel>("EXEC [dbo].[SpMwraClientListingCSV] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwraClientListingNewReturnModel> SpMwraClientListingNew(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpMwraClientListingNew(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraClientListingNewReturnModel> SpMwraClientListingNew(int? mwraclientId, int? projectId, out int procResult)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwraClientListingNewReturnModel>("EXEC @procResult = [dbo].[SpMwraClientListingNEW] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraClientListingNewReturnModel>> SpMwraClientListingNewAsync(int? mwraclientId, int? projectId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwraClientListingNewReturnModel>("EXEC [dbo].[SpMwraClientListingNEW] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public SpmwraClientListingtestReturnModel SpmwraClientListingtest(int? mwraclientId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;


            var procResultData = new SpmwraClientListingtestReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[spmwraClientListingtest]";
            cmd.Parameters.Add(mwraclientIdParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SpmwraClientListingtestReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<SpmwraClientListingtestReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<SpmwraClientListingtestReturnModel> SpmwraClientListingtestAsync(int? mwraclientId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;


            var procResultData = new SpmwraClientListingtestReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[spmwraClientListingtest]";
            cmd.Parameters.Add(mwraclientIdParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<SpmwraClientListingtestReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<SpmwraClientListingtestReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel> SpMwraDropOutClientListing(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpMwraDropOutClientListing(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel> SpMwraDropOutClientListing(int? mwraclientId, int? projectId, out int procResult)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwraDropOutClientListingReturnModel>("EXEC @procResult = [dbo].[SpMwraDropOutClientListing] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraDropOutClientListingReturnModel>> SpMwraDropOutClientListingAsync(int? mwraclientId, int? projectId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwraDropOutClientListingReturnModel>("EXEC [dbo].[SpMwraDropOutClientListing] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel> SpMwrasAgeWiseReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpMwrasAgeWiseReport(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel> SpMwrasAgeWiseReport(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwrasAgeWiseReportReturnModel>("EXEC @procResult = [dbo].[SpMwrasAgeWiseReport] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasAgeWiseReportReturnModel>> SpMwrasAgeWiseReportAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwrasAgeWiseReportReturnModel>("EXEC [dbo].[SpMwrasAgeWiseReport] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwrasClientListingReturnModel> SpMwrasClientListing()
        {
            int procResult;
            return SpMwrasClientListing(out procResult);
        }

        public System.Collections.Generic.List<SpMwrasClientListingReturnModel> SpMwrasClientListing(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwrasClientListingReturnModel>("EXEC @procResult = [dbo].[spMWRAS_ClientListing] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasClientListingReturnModel>> SpMwrasClientListingAsync()
        {
            var procResultData = await Database.SqlQuery<SpMwrasClientListingReturnModel>("EXEC [dbo].[spMWRAS_ClientListing] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel> SpMwrasClientListingtestingpurpost(int? mwraclientId)
        {
            int procResult;
            return SpMwrasClientListingtestingpurpost(mwraclientId, out procResult);
        }

        public System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel> SpMwrasClientListingtestingpurpost(int? mwraclientId, out int procResult)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwrasClientListingtestingpurpostReturnModel>("EXEC @procResult = [dbo].[SpMwrasClientListingtestingpurpost] @mwraclientId", mwraclientIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasClientListingtestingpurpostReturnModel>> SpMwrasClientListingtestingpurpostAsync(int? mwraclientId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwrasClientListingtestingpurpostReturnModel>("EXEC [dbo].[SpMwrasClientListingtestingpurpost] @mwraclientId", mwraclientIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwrasListingReturnModel> SpMwrasListing(int? projectId)
        {
            int procResult;
            return SpMwrasListing(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpMwrasListingReturnModel> SpMwrasListing(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwrasListingReturnModel>("EXEC @procResult = [dbo].[spMWRAS_Listing] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwrasListingReturnModel>> SpMwrasListingAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwrasListingReturnModel>("EXEC [dbo].[spMWRAS_Listing] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpMwraWithMwraclientReturnModel> SpMwraWithMwraclient(int? appUserId)
        {
            int procResult;
            return SpMwraWithMwraclient(appUserId, out procResult);
        }

        public System.Collections.Generic.List<SpMwraWithMwraclientReturnModel> SpMwraWithMwraclient(int? appUserId, out int procResult)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpMwraWithMwraclientReturnModel>("EXEC @procResult = [dbo].[SpMwraWithMwraclient] @appUserId", appUserIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpMwraWithMwraclientReturnModel>> SpMwraWithMwraclientAsync(int? appUserId)
        {
            var appUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@appUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = appUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!appUserId.HasValue)
                appUserIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpMwraWithMwraclientReturnModel>("EXEC [dbo].[SpMwraWithMwraclient] @appUserId", appUserIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpNewUserClientListingReturnModel> SpNewUserClientListing(int? mwraclientId, int? projectId)
        {
            int procResult;
            return SpNewUserClientListing(mwraclientId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserClientListingReturnModel> SpNewUserClientListing(int? mwraclientId, int? projectId, out int procResult)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpNewUserClientListingReturnModel>("EXEC @procResult = [dbo].[SpNewUserClientListing] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserClientListingReturnModel>> SpNewUserClientListingAsync(int? mwraclientId, int? projectId)
        {
            var mwraclientIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@mwraclientId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mwraclientId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mwraclientId.HasValue)
                mwraclientIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpNewUserClientListingReturnModel>("EXEC [dbo].[SpNewUserClientListing] @mwraclientId, @ProjectId", mwraclientIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel> SpNewUserClientListingCsv(int? projectId)
        {
            int procResult;
            return SpNewUserClientListingCsv(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel> SpNewUserClientListingCsv(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpNewUserClientListingCsvReturnModel>("EXEC @procResult = [dbo].[SpNewUserClientListingCSV] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserClientListingCsvReturnModel>> SpNewUserClientListingCsvAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpNewUserClientListingCsvReturnModel>("EXEC [dbo].[SpNewUserClientListingCSV] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseReturnModel> SpNewUserMethodWise(int? projectId)
        {
            int procResult;
            return SpNewUserMethodWise(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseReturnModel> SpNewUserMethodWise(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpNewUserMethodWiseReturnModel>("EXEC @procResult = [dbo].[SpNewUserMethodWise] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserMethodWiseReturnModel>> SpNewUserMethodWiseAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpNewUserMethodWiseReturnModel>("EXEC [dbo].[SpNewUserMethodWise] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel> SpNewUserMethodWiseByRegionId(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpNewUserMethodWiseByRegionId(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel> SpNewUserMethodWiseByRegionId(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpNewUserMethodWiseByRegionIdReturnModel>("EXEC @procResult = [dbo].[SpNewUserMethodWiseByRegionId] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpNewUserMethodWiseByRegionIdReturnModel>> SpNewUserMethodWiseByRegionIdAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpNewUserMethodWiseByRegionIdReturnModel>("EXEC [dbo].[SpNewUserMethodWiseByRegionId] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpNoorCheckListReturnModel> SpNoorCheckList()
        {
            int procResult;
            return SpNoorCheckList(out procResult);
        }

        public System.Collections.Generic.List<SpNoorCheckListReturnModel> SpNoorCheckList(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpNoorCheckListReturnModel>("EXEC @procResult = [dbo].[SpNoorCheckList] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpNoorCheckListReturnModel>> SpNoorCheckListAsync()
        {
            var procResultData = await Database.SqlQuery<SpNoorCheckListReturnModel>("EXEC [dbo].[SpNoorCheckList] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel> SpPmsAnalticswithCount(int? projectId)
        {
            int procResult;
            return SpPmsAnalticswithCount(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel> SpPmsAnalticswithCount(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpPmsAnalticswithCountReturnModel>("EXEC @procResult = [dbo].[spPmsAnalticswithCount] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpPmsAnalticswithCountReturnModel>> SpPmsAnalticswithCountAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpPmsAnalticswithCountReturnModel>("EXEC [dbo].[spPmsAnalticswithCount] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SppregnantWomanReturnModel> SppregnantWoman()
        {
            int procResult;
            return SppregnantWoman(out procResult);
        }

        public System.Collections.Generic.List<SppregnantWomanReturnModel> SppregnantWoman(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SppregnantWomanReturnModel>("EXEC @procResult = [dbo].[SppregnantWoman] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SppregnantWomanReturnModel>> SppregnantWomanAsync()
        {
            var procResultData = await Database.SqlQuery<SppregnantWomanReturnModel>("EXEC [dbo].[SppregnantWoman] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpRoleMenuAccessReturnModel> SpRoleMenuAccess()
        {
            int procResult;
            return SpRoleMenuAccess(out procResult);
        }

        public System.Collections.Generic.List<SpRoleMenuAccessReturnModel> SpRoleMenuAccess(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpRoleMenuAccessReturnModel>("EXEC @procResult = [dbo].[spRoleMenuAccess] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpRoleMenuAccessReturnModel>> SpRoleMenuAccessAsync()
        {
            var procResultData = await Database.SqlQuery<SpRoleMenuAccessReturnModel>("EXEC [dbo].[spRoleMenuAccess] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpsessionContentReturnModel> SpsessionContent(int? sessionId)
        {
            int procResult;
            return SpsessionContent(sessionId, out procResult);
        }

        public System.Collections.Generic.List<SpsessionContentReturnModel> SpsessionContent(int? sessionId, out int procResult)
        {
            var sessionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sessionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionId.HasValue)
                sessionIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpsessionContentReturnModel>("EXEC @procResult = [dbo].[SpsessionContent] @sessionId", sessionIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpsessionContentReturnModel>> SpsessionContentAsync(int? sessionId)
        {
            var sessionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sessionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionId.HasValue)
                sessionIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpsessionContentReturnModel>("EXEC [dbo].[SpsessionContent] @sessionId", sessionIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SPsessionInventoryReturnModel> SPsessionInventory(int? sessionId)
        {
            int procResult;
            return SPsessionInventory(sessionId, out procResult);
        }

        public System.Collections.Generic.List<SPsessionInventoryReturnModel> SPsessionInventory(int? sessionId, out int procResult)
        {
            var sessionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sessionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionId.HasValue)
                sessionIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SPsessionInventoryReturnModel>("EXEC @procResult = [dbo].[SPsessionInventory] @sessionId", sessionIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SPsessionInventoryReturnModel>> SPsessionInventoryAsync(int? sessionId)
        {
            var sessionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sessionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionId.HasValue)
                sessionIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SPsessionInventoryReturnModel>("EXEC [dbo].[SPsessionInventory] @sessionId", sessionIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SPsessionmwraReturnModel> SPsessionmwra(int? sessionid)
        {
            int procResult;
            return SPsessionmwra(sessionid, out procResult);
        }

        public System.Collections.Generic.List<SPsessionmwraReturnModel> SPsessionmwra(int? sessionid, out int procResult)
        {
            var sessionidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Sessionid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionid.HasValue)
                sessionidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SPsessionmwraReturnModel>("EXEC @procResult = [dbo].[SPsessionmwra] @Sessionid", sessionidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SPsessionmwraReturnModel>> SPsessionmwraAsync(int? sessionid)
        {
            var sessionidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Sessionid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sessionid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sessionid.HasValue)
                sessionidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SPsessionmwraReturnModel>("EXEC [dbo].[SPsessionmwra] @Sessionid", sessionidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpStockListReturnModel> SpStockList()
        {
            int procResult;
            return SpStockList(out procResult);
        }

        public System.Collections.Generic.List<SpStockListReturnModel> SpStockList(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpStockListReturnModel>("EXEC @procResult = [dbo].[spStockList] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpStockListReturnModel>> SpStockListAsync()
        {
            var procResultData = await Database.SqlQuery<SpStockListReturnModel>("EXEC [dbo].[spStockList] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTargetPopuplationReturnModel> SpTargetPopuplation(int? regionId, int? projectId)
        {
            int procResult;
            return SpTargetPopuplation(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTargetPopuplationReturnModel> SpTargetPopuplation(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTargetPopuplationReturnModel>("EXEC @procResult = [dbo].[SpTargetPopuplation] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTargetPopuplationReturnModel>> SpTargetPopuplationAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTargetPopuplationReturnModel>("EXEC [dbo].[SpTargetPopuplation] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestCurrentUserReturnModel> SpTestCurrentUser(int? projectId)
        {
            int procResult;
            return SpTestCurrentUser(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestCurrentUserReturnModel> SpTestCurrentUser(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestCurrentUserReturnModel>("EXEC @procResult = [dbo].[sp_TestCurrentUser] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestCurrentUserReturnModel>> SpTestCurrentUserAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTestCurrentUserReturnModel>("EXEC [dbo].[sp_TestCurrentUser] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel> SpTestCurrentUserMethodWise()
        {
            int procResult;
            return SpTestCurrentUserMethodWise(out procResult);
        }

        public System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel> SpTestCurrentUserMethodWise(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestCurrentUserMethodWiseReturnModel>("EXEC @procResult = [dbo].[SP_TestCurrentUserMethodWise] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestCurrentUserMethodWiseReturnModel>> SpTestCurrentUserMethodWiseAsync()
        {
            var procResultData = await Database.SqlQuery<SpTestCurrentUserMethodWiseReturnModel>("EXEC [dbo].[SP_TestCurrentUserMethodWise] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel> SpTestDetailsOfShiftedClients(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpTestDetailsOfShiftedClients(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel> SpTestDetailsOfShiftedClients(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestDetailsOfShiftedClientsReturnModel>("EXEC @procResult = [dbo].[sp_TestDetailsOfShiftedClients] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestDetailsOfShiftedClientsReturnModel>> SpTestDetailsOfShiftedClientsAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTestDetailsOfShiftedClientsReturnModel>("EXEC [dbo].[sp_TestDetailsOfShiftedClients] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel> SpTestFpUsersTaluqaTehsilWise()
        {
            int procResult;
            return SpTestFpUsersTaluqaTehsilWise(out procResult);
        }

        public System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel> SpTestFpUsersTaluqaTehsilWise(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestFpUsersTaluqaTehsilWiseReturnModel>("EXEC @procResult = [dbo].[sp_TestFpUsersTaluqa_Tehsil wise] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestFpUsersTaluqaTehsilWiseReturnModel>> SpTestFpUsersTaluqaTehsilWiseAsync()
        {
            var procResultData = await Database.SqlQuery<SpTestFpUsersTaluqaTehsilWiseReturnModel>("EXEC [dbo].[sp_TestFpUsersTaluqa_Tehsil wise] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestInterventionAreaReturnModel> SpTestInterventionArea(int? regionId, int? projectId)
        {
            int procResult;
            return SpTestInterventionArea(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestInterventionAreaReturnModel> SpTestInterventionArea(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestInterventionAreaReturnModel>("EXEC @procResult = [dbo].[SP_TestInterventionArea] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestInterventionAreaReturnModel>> SpTestInterventionAreaAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTestInterventionAreaReturnModel>("EXEC [dbo].[SP_TestInterventionArea] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel> SpTestNewUserMethodWise()
        {
            int procResult;
            return SpTestNewUserMethodWise(out procResult);
        }

        public System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel> SpTestNewUserMethodWise(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestNewUserMethodWiseReturnModel>("EXEC @procResult = [dbo].[SP_TestNewUserMethodWise] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestNewUserMethodWiseReturnModel>> SpTestNewUserMethodWiseAsync()
        {
            var procResultData = await Database.SqlQuery<SpTestNewUserMethodWiseReturnModel>("EXEC [dbo].[SP_TestNewUserMethodWise] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestTargetPopuplationReturnModel> SpTestTargetPopuplation()
        {
            int procResult;
            return SpTestTargetPopuplation(out procResult);
        }

        public System.Collections.Generic.List<SpTestTargetPopuplationReturnModel> SpTestTargetPopuplation(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestTargetPopuplationReturnModel>("EXEC @procResult = [dbo].[SP_TestTargetPopuplation] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestTargetPopuplationReturnModel>> SpTestTargetPopuplationAsync()
        {
            var procResultData = await Database.SqlQuery<SpTestTargetPopuplationReturnModel>("EXEC [dbo].[SP_TestTargetPopuplation] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel> SpTestUnmetNeedInMwras(int? projectId)
        {
            int procResult;
            return SpTestUnmetNeedInMwras(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel> SpTestUnmetNeedInMwras(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTestUnmetNeedInMwrasReturnModel>("EXEC @procResult = [dbo].[sp_TestUnmet Need in MWRAS] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTestUnmetNeedInMwrasReturnModel>> SpTestUnmetNeedInMwrasAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTestUnmetNeedInMwrasReturnModel>("EXEC [dbo].[sp_TestUnmet Need in MWRAS] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTotalClmisHandStockReturnModel> SpTotalClmisHandStock(int? projectId)
        {
            int procResult;
            return SpTotalClmisHandStock(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTotalClmisHandStockReturnModel> SpTotalClmisHandStock(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTotalClmisHandStockReturnModel>("EXEC @procResult = [dbo].[SpTotalClmisHandStock] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTotalClmisHandStockReturnModel>> SpTotalClmisHandStockAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTotalClmisHandStockReturnModel>("EXEC [dbo].[SpTotalClmisHandStock] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTotalClmisStocksReturnModel> SpTotalClmisStocks(int? projectId, int? regionid)
        {
            int procResult;
            return SpTotalClmisStocks(projectId, regionid, out procResult);
        }

        public System.Collections.Generic.List<SpTotalClmisStocksReturnModel> SpTotalClmisStocks(int? projectId, int? regionid, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var regionidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Regionid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionid.HasValue)
                regionidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTotalClmisStocksReturnModel>("EXEC @procResult = [dbo].[SpTotalClmisStocks] @ProjectId, @Regionid", projectIdParam, regionidParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTotalClmisStocksReturnModel>> SpTotalClmisStocksAsync(int? projectId, int? regionid)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var regionidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Regionid", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionid.HasValue)
                regionidParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTotalClmisStocksReturnModel>("EXEC [dbo].[SpTotalClmisStocks] @ProjectId, @Regionid", projectIdParam, regionidParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel> SpTrendAmongCurrentUsers(int? regionId, int? projectId)
        {
            int procResult;
            return SpTrendAmongCurrentUsers(regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel> SpTrendAmongCurrentUsers(int? regionId, int? projectId, out int procResult)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTrendAmongCurrentUsersReturnModel>("EXEC @procResult = [dbo].[SPTrendAmongCurrentUsers] @RegionId, @ProjectId", regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTrendAmongCurrentUsersReturnModel>> SpTrendAmongCurrentUsersAsync(int? regionId, int? projectId)
        {
            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTrendAmongCurrentUsersReturnModel>("EXEC [dbo].[SPTrendAmongCurrentUsers] @RegionId, @ProjectId", regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel> SpTrendAmongNewUsers(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            int procResult;
            return SpTrendAmongNewUsers(startDate, endDate, regionId, projectId, out procResult);
        }

        public System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel> SpTrendAmongNewUsers(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTrendAmongNewUsersReturnModel>("EXEC @procResult = [dbo].[SpTrendAmongNewUsers] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTrendAmongNewUsersReturnModel>> SpTrendAmongNewUsersAsync(System.DateTime? startDate, System.DateTime? endDate, int? regionId, int? projectId)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var regionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RegionId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = regionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regionId.HasValue)
                regionIdParam.Value = System.DBNull.Value;

            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTrendAmongNewUsersReturnModel>("EXEC [dbo].[SpTrendAmongNewUsers] @StartDate, @EndDate, @RegionId, @ProjectId", startDateParam, endDateParam, regionIdParam, projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpUsersReturnModel> SpUsers(int? projectId)
        {
            int procResult;
            return SpUsers(projectId, out procResult);
        }

        public System.Collections.Generic.List<SpUsersReturnModel> SpUsers(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUsersReturnModel>("EXEC @procResult = [dbo].[spUsers] @projectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersReturnModel>> SpUsersAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@projectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpUsersReturnModel>("EXEC [dbo].[spUsers] @projectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<TaluqaListingDataReturnModel> TaluqaListingData(int? projectId)
        {
            int procResult;
            return TaluqaListingData(projectId, out procResult);
        }

        public System.Collections.Generic.List<TaluqaListingDataReturnModel> TaluqaListingData(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TaluqaListingDataReturnModel>("EXEC @procResult = [dbo].[TaluqaListingData] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<TaluqaListingDataReturnModel>> TaluqaListingDataAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<TaluqaListingDataReturnModel>("EXEC [dbo].[TaluqaListingData] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel> TestCurrentUserForEachLhv()
        {
            int procResult;
            return TestCurrentUserForEachLhv(out procResult);
        }

        public System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel> TestCurrentUserForEachLhv(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TestCurrentUserForEachLhvReturnModel>("EXEC @procResult = [dbo].[TestCurrentUserForEachLHV] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<TestCurrentUserForEachLhvReturnModel>> TestCurrentUserForEachLhvAsync()
        {
            var procResultData = await Database.SqlQuery<TestCurrentUserForEachLhvReturnModel>("EXEC [dbo].[TestCurrentUserForEachLHV] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<TestMwraForEachLhvReturnModel> TestMwraForEachLhv()
        {
            int procResult;
            return TestMwraForEachLhv(out procResult);
        }

        public System.Collections.Generic.List<TestMwraForEachLhvReturnModel> TestMwraForEachLhv(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TestMwraForEachLhvReturnModel>("EXEC @procResult = [dbo].[TestMwraForEachLHV] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<TestMwraForEachLhvReturnModel>> TestMwraForEachLhvAsync()
        {
            var procResultData = await Database.SqlQuery<TestMwraForEachLhvReturnModel>("EXEC [dbo].[TestMwraForEachLHV] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<TestProcedureReturnModel> TestProcedure()
        {
            int procResult;
            return TestProcedure(out procResult);
        }

        public System.Collections.Generic.List<TestProcedureReturnModel> TestProcedure(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TestProcedureReturnModel>("EXEC @procResult = [dbo].[TestProcedure] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<TestProcedureReturnModel>> TestProcedureAsync()
        {
            var procResultData = await Database.SqlQuery<TestProcedureReturnModel>("EXEC [dbo].[TestProcedure] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel> TestTotalMcprTaluqaWise()
        {
            int procResult;
            return TestTotalMcprTaluqaWise(out procResult);
        }

        public System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel> TestTotalMcprTaluqaWise(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TestTotalMcprTaluqaWiseReturnModel>("EXEC @procResult = [dbo].[TestTotalMcprTaluqaWise] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<TestTotalMcprTaluqaWiseReturnModel>> TestTotalMcprTaluqaWiseAsync()
        {
            var procResultData = await Database.SqlQuery<TestTotalMcprTaluqaWiseReturnModel>("EXEC [dbo].[TestTotalMcprTaluqaWise] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel> TestTotalMwraStatusWise()
        {
            int procResult;
            return TestTotalMwraStatusWise(out procResult);
        }

        public System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel> TestTotalMwraStatusWise(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TestTotalMwraStatusWiseReturnModel>("EXEC @procResult = [dbo].[TestTotalMwraStatusWise] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<TestTotalMwraStatusWiseReturnModel>> TestTotalMwraStatusWiseAsync()
        {
            var procResultData = await Database.SqlQuery<TestTotalMwraStatusWiseReturnModel>("EXEC [dbo].[TestTotalMwraStatusWise] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UnionCouncilListingDataReturnModel> UnionCouncilListingData(int? projectId)
        {
            int procResult;
            return UnionCouncilListingData(projectId, out procResult);
        }

        public System.Collections.Generic.List<UnionCouncilListingDataReturnModel> UnionCouncilListingData(int? projectId, out int procResult)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UnionCouncilListingDataReturnModel>("EXEC @procResult = [dbo].[UnionCouncilListingData] @ProjectId", projectIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UnionCouncilListingDataReturnModel>> UnionCouncilListingDataAsync(int? projectId)
        {
            var projectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProjectId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = projectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!projectId.HasValue)
                projectIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UnionCouncilListingDataReturnModel>("EXEC [dbo].[UnionCouncilListingData] @ProjectId", projectIdParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
