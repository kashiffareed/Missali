// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Hands.Data.HandsDB
{

    // RoleMenuAccess
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RoleMenuAccessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RoleMenuAccess>
    {
        public RoleMenuAccessConfiguration()
            : this("dbo")
        {
        }

        public RoleMenuAccessConfiguration(string schema)
        {
            ToTable("RoleMenuAccess", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            Property(x => x.MenuId).HasColumnName(@"MenuId").HasColumnType("int").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.AccessLevelId).HasColumnName(@"AccessLevelId").HasColumnType("smallint").IsRequired();
            Property(x => x.ProjectId).HasColumnName(@"ProjectId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasRequired(a => a.AccessLevel).WithMany(b => b.RoleMenuAccesses).HasForeignKey(c => c.AccessLevelId).WillCascadeOnDelete(false); // FK_RoleMenuAccess_AccessLevel
            HasRequired(a => a.Menu).WithMany(b => b.RoleMenuAccesses).HasForeignKey(c => c.MenuId).WillCascadeOnDelete(false); // FK_RoleMenuAccess_Menu
            HasRequired(a => a.Role).WithMany(b => b.RoleMenuAccesses).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RoleMenuAccess_roles
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
