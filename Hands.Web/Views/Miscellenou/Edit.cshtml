@using Hands.Common.Common
@model Hands.ViewModels.Models.Miscellenou.Miscellenou

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">

    var right =
        '@(HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.view.ToInt() && x.MenuId == CommonConstant.MenuList.ClmisReturnManagement.ToInt()))';

    if (right === 'False') {
        window.location.href = '@Url.Action("Index","Default")';
    }
</script>
<style>
    .popup {
        position: fixed;
        background: #5f5f5f26;
        width: 100%;
        padding-left: 30%;
        top: 0;
        padding-top: 21%;
        height: 274%;
    }

    .m-footer {
        display: none
    }

    .titlehead {
        font-size: 22px;
        color: #676767;
        padding-top: 12px;
        padding-left: 14px;
    }
</style>

<div id="TargeDiv">
    <div class="m-content">


        <div class="col-lg-12">
            <!--begin::Portlet-->
            <div class="m-portlet">



                @using (Ajax.BeginForm("Edit", "Miscellenou",
                        new AjaxOptions
                        {
                            LoadingElementId = "resultLoadingDiv",
                            InsertionMode = InsertionMode.Replace,
                            OnBegin = "ShowProcessingMsg",
                            OnComplete = "HideProcessingMsg",
                            OnSuccess = "successEdit",
                            UpdateTargetId = "TargeDiv"

                        },
                        new { @id = "loginForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(x => x.Id)
                    @Html.HiddenFor(x => x.ProjectId)
                    <div class="form-horizontal" style="    padding-left: 14px;">

                        <h4 class="titlehead">Edit Miscellenous Management</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        @{
                            var RegionSelectList = Model.RegionList.Select(r => new SelectListItem { Text = r.RegionName, Value = r.RegionsId.ToString() }).ToList();
                        }
                        <div class="form-group">
                            <label class="control-label col-md-2">Region</label>
                            <div class="col-md-6">
                                @Html.DropDownListFor(f => f.RegionId, RegionSelectList, "Select", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RegionId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("User Type", new { @class = "control-label col-md-2" })
                            <div class="col-md-6">

                                @Html.DropDownListFor(x => x.UserType, new List<SelectListItem>
                                                                                                                                                            {
                                                                                                                                                                new SelectListItem{ Text="Select", Value = "Select" },
                                                                                                                                                                new SelectListItem{ Text="LHV", Value = "lhv" },
                                                                                                                                                                new SelectListItem{ Text="HCP", Value = "hcp" },
                                                                                                                                                            }, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UserType, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        @*<div class="form-group" id="UserDropdown" style="display: none">
                                <label id="typedrilleddown" class="control-label col-md-2">TYPE</label>
                                <div class="col-md-6">
                                    @Html.DropDownListFor(f => f.UserId, new SelectList(string.Empty, "Value", "Text"), "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                </div>
                            </div>*@


                        <div class="form-group">
                            @Html.Label("Product Name", new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                @*@Html.DropDownListFor(f => f.ProductId, new SelectList(string.Empty, "Value", "Text"), "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("UserId", new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.UserId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                @*@Html.DropDownListFor(f => f.ProductId, new SelectList(string.Empty, "Value", "Text"), "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Retrunid", new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.ReturnId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ReturnId, "", new { @class = "text-danger" })
                                @*@Html.DropDownListFor(f => f.ProductId, new SelectList(string.Empty, "Value", "Text"), "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>

                        <div class="form-group" style="display: none" id="Quatity">
                            <label class="control-label col-md-12">Product current Quantity</label>
                            <div class="col-md-6">
                                <strong id="Qty"></strong>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.Quantity, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })

                            </div>
                            <label id="errorlabel" class="text-danger"></label>
                        </div>

                        <div class="form-group" style="display: none" id="returnType">
                            @Html.Label("Return Type", new { @class = "control-label col-md-2" })
                            <div class="col-md-6">

                                @Html.DropDownListFor(x => x.ReturnType, new List<SelectListItem>
                                    {
                                        new SelectListItem{ Text="Select", Value = "Select" },
                                        new SelectListItem{ Text="Return To Hands", Value = "1" },
                                        new SelectListItem{ Text="Miscellenous", Value = "2" },
                                    }, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ReturnType, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-6" style="padding-bottom: 16px;">
                                <input type="submit" id="savebtn" value="Save" class="edit-button btn btn-primary top-button" />
                                <a href="~/Miscellenou/index?class=m-scroll-top"><span class="fa fa-arrow-circle-o-left col-md-offset-2" style="font-size: 36px;    float: right;"></span></a>
                            </div>
                        </div>

                        <div id="resultLoadingDiv" hidden class="popup">

                            <img src="~/Content/Images/abc.gif" />
                        </div>
                    </div>
                }


            </div>
            <!--end::Portlet-->
        </div>




    </div>


</div>



<script type="text/javascript">

    function successEdit() {
        swal("Successful!", "Your record has been successfully updated!", "success");
    }
    function ShowProcessingMsg() {
        $('#resultLoadingDiv').removeAttr('hidden');

    }
    function HideProcessingMsg() {

        $('#resultLoadingDiv').attr('hidden', '');
    }
    function success() {
        swal("Successful!", "Your record has been successfully saved!", "success");
    }
    $(document).ready(function () {
        debugger;
        GetUsersByUserType('@Model.UserType', '@Model.UserId');
        GetProductByUserId('@Model.UserId', '@Model.ProductId');
        GetProductQuantity('@Model.UserId', '@Model.ProductId');
    });

    $("#Quantity").blur(function () {
        var Quantity = $('#Quantity').val();
        var RemainingQty = $('#Qty').text();
        if (parseInt(Quantity) > parseInt(RemainingQty)) {
            $('#errorlabel').text('Quantity value cannot be grater than' + ' ' + RemainingQty);
            $('#savebtn').attr('disabled', "disabled");
        } else {
            $('#errorlabel').text('');
            $('#savebtn').removeAttr('disabled', "disabled");
        }

    });


    $("#UserType").change(function () {
        debugger;
        var id = $(this).val();

        GetUsersByUserType(id, 0);
    });

    function GetUsersByUserType(id, userid) {
            var value = id;
        $('#UserDropdown').slideUp();
        $('#Quatity').slideUp();
        $('#productName').slideUp();
        $('#returnType').slideUp();
        $('#ProductId').empty();


        if (value != "Select") {
            debugger;
            $("#UserId").empty();
            //$("#ProductId").empty();
            $("#Qty").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetUsersByUserType")', // we are calling json method

                dataType: 'json',

                data: { usertype: value, userId: userid },
                // here we are get value of selected country and passing same value as inputto json method GetStates.


                success: function (User) {
                    debugger;
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    var items = '<option value=0>Select</option>';
                    var selectedValue;
                    $.each(User,
                        function (i, User) {

                            if (User.Selected) {
                                selectedValue = User.Value;
                            }

                            var optionHtml = "<option {selected} value='{value}'>{text}</option>";
                            optionHtml = optionHtml.replace('{value}', User.Value);
                            optionHtml = optionHtml.replace('{text}', User.Text);
                            optionHtml = optionHtml.replace('{selected}', (User.Selected == true ? "selected='selected'" : ""));

                            items += optionHtml;


                        });
                    $('#typedrilleddown').text(value.toUpperCase());
                    $('#UserId').html(items);
                    $('#UserId').val(selectedValue == undefined ? '0' : selectedValue);
                    $('#UserDropdown').slideDown();

                },
                error: function(ex) {
                    var items = '<option>Select</option>';
                    $('#UserId').html(items);
                    $('#UserDropdown').slideUp();
                }
            });

        } else {
            $('#UserDropdown').slideUp();
            var items = '<option>Select</option>';
            $('#productName').slideUp();
            $('#returnType').slideUp();
            $('#UserId').html(items);
            $('#ProductId').html(items);
            $("#Qty").empty();

        }
    }

    $("#UserId").change(function () {
        debugger;
        var id = $(this).val();

        GetProductByUserId(id, 0);
    });

    function GetProductByUserId(id, productid) {
        debugger;

        $('#Quatity').slideUp();
        $('#productName').slideUp();
        $('#returnType').slideUp();
        $('#ProductId').empty();


        var value = id;
        if (value != "Select") {
            $("#ProductId").empty();
            $("#Qty").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetProductByUserId")', // we are calling json method

                dataType: 'json',

                data: { UserId: value, ProductId: productid },
                // here we are get value of selected country and passing same value as inputto json method GetStates.


                success: function(Product) {
                    debugger;
                    var items = '<option value=0>Select</option>';
                    var selectedValue;
                    $.each(Product,
                        function (i, Product) {

                            if (Product.Selected) {
                                selectedValue = Product.Value;
                            }

                            var optionHtml = "<option {selected} value='{value}'>{text}</option>";
                            optionHtml = optionHtml.replace('{value}', Product.Value);
                            optionHtml = optionHtml.replace('{text}', Product.Text);
                            optionHtml = optionHtml.replace('{selected}', (Product.Selected == true ? "selected='selected'" : ""));

                            items += optionHtml;

                        });
                    $('#ProductId').html(items);
                    $('#productName').slideDown();


                },
                error: function(ex) {

                    $('#productName').slideUp();
                    $('#returnType').slideUp();
                }
            });
            return false;
        } else {
            var items = '<option>Select</option>';
            $('#productName').slideUp();
            $('#returnType').slideUp();
            $('#Quatity').slideUp();
            $("#Qty").empty();

        }

    }

    $("#ProductId").change(function () {
        debugger;
        var Pid = $("#ProductId").val();
        var Uid = $("#UserId").val();

        GetProductQuantity(Uid, Pid);
    });

    function GetProductQuantity(uid, pid) {
        debugger;

        $('#Quatity').slideUp();
        $('#returnType').slideUp();
        $("#Qty").empty();

        var uvalue = uid;
        var pvalue = pid;

        if (uvalue != "Select" && pvalue != "Select") {

            $("#Qty").empty();
            $.ajax({

                type: 'POST',
                url: '@Url.Action("GetProductQuantity")', // we are calling json method

                dataType: 'json',

                data: { ProductId: pvalue, UserId: uvalue },
                // here we are get value of selected country and passing same value as inputto json method GetStates.


                success: function(ProductClmisReturnList) {
                    debugger;
                    $('#Qty').text(ProductClmisReturnList[0].RemainingQuantity);
                    $('#Quatity').slideDown();
                    $('#returnType').slideDown();
                },
                error: function(ex) {

                    var items = '<option>Select</option>';
                    $('#UserId').html(items);
                    $('#UserDropdown').slideUp();
                }
            });
        } else {

            $('#Quatity').slideUp();
            $("#Qty").empty();
            $('#returnType').slideUp();
        }

    }


</script>


