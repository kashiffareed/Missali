@using Hands.Common.Common
@model Hands.ViewModels.Models.user

@{
    ViewBag.Title = "Edit";
}


<script type="text/javascript">

    var right =
        '@(HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.view.ToInt() && x.MenuId == CommonConstant.MenuList.User.ToInt()))';

    if (right === 'False') {
        window.location.href = '@Url.Action("Index","Default")';
    }
</script>


<style>
    .popup {
        position: fixed;
        background: #5f5f5f26;
        width: 100%;
        padding-left: 30%;
        top: 0;
        padding-top: 21%;
        height: 274%;
    }

    .m-footer {
        display: none
    }

    .titlehead {
        font-size: 22px;
        color: #676767;
        padding-top: 12px;
        padding-left: 14px;
    }
</style>


<div id="TargeDiv">
    <div class="m-content">


        <div class="col-lg-12">
            <!--begin::Portlet-->
            <div class="m-portlet">





                @using (Ajax.BeginForm("Edit", "User",
                    new AjaxOptions
                    {
                        LoadingElementId = "resultLoadingDiv",
                        InsertionMode = InsertionMode.ReplaceWith,
                        OnBegin = "ShowProcessingMsg",
                        OnComplete = "HideProcessingMsg",
                        OnSuccess = "successEdit",
                        UpdateTargetId = "TargeDiv"

                    },
                    new { @id = "loginForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(x => x.UserId)
                    <div class="form-horizontal" style="padding-left: 14px;">

                        <h4 class="titlehead">Edit User</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @*<div class="form-group">
                                @Html.LabelFor(model => model.FullName, new { @class = "control-label col-md-2" })
                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.FullName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                </div>
                            </div>*@

                        <div class="form-group">
                            @Html.LabelFor(model => model.UserName, new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Login E-Mail</label>
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group ">
                            <label class="control-label col-md-2">Password</label>
                            <div class="row">
                                <div class="col-md-5" style="    margin-left: 15px;">
                                    @Html.TextBoxFor(model => model.Pwd, new { @class = "form-control", type = "password", id = "eye" })
                                    @Html.ValidationMessageFor(model => model.Pwd, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    <i class="fa fa-eye" aria-hidden="true" onClick="myFunction()"></i>
                                </div>
                            </div>


                        </div>



                        @*@{
                                var projectSelectListItems = Model.Project.Select(r => new SelectListItem { Text = r.Name, Value = r.Id.ToString() }).ToList();
                            }
                            <div class="form-group">
                                @Html.Label("Project Name", new { @class = "control-label col-md-2" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(f => f.ProjectId, projectSelectListItems, "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="UserDropdown" style="display: none">
                                <div class="form-group">
                                    @Html.Label("Role Name", new {@class = "control-label col-md-2"})
                                    <div class="col-md-6">
                                        @Html.DropDownListFor(f => f.RoleId, new SelectList(string.Empty, "Value", "Text"), "Select", new {@class = "form-control"})
                                        @Html.ValidationMessageFor(model => model.RoleId, "", new {@class = "text-danger"})
                                    </div>
                                </div>
                            </div>*@
                        @{
                            var RoleSelectListItems = Model.Role.Select(r => new SelectListItem { Text = r.role_name, Value = r.role_id.ToString() }).ToList();
                        }
                        <div class="form-group">
                            <label class="control-label col-md-2">Role Name</label>
                            <div class="col-md-6">
                                @Html.DropDownListFor(f => f.RoleId, RoleSelectListItems, "Select", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Designation", new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.Designation, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-3" })
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-control col-md-2" })
                            </div>
                        </div>

                        @*<div class="form-group">
                                @Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.RoleId, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                                </div>
                            </div>*@


                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-6" style="padding-bottom: 60px;">
                                <input type="submit" value="Save" class="edit-button btn btn-primary top-button" />
                                <a href="~/User/Index?class=m-scroll-top"><span class="fa fa-arrow-circle-o-left col-md-offset-2" style="font-size: 36px;    float: right;"></span></a>
                            </div>

                        </div>

                        <div id="resultLoadingDiv" hidden class="popup">

                            <img src="~/Content/Images/abc.gif" />
                        </div>
                    </div>
                }
            </div>
            <!--end::Portlet-->
        </div>
    </div>

</div>
<script type="text/javascript">
    function ShowProcessingMsg() {
        $('#resultLoadingDiv').removeAttr('hidden');

    }

    function HideProcessingMsg() {

        $('#resultLoadingDiv').attr('hidden', '');
    }

    function successEdit() {
        swal("Successful!", "Your record has been successfully updated!", "success");
    }

    function myFunction() {
        var x = document.getElementById("eye");
        if (x.type === "password") {
            x.type = "text";
        } else {
            x.type = "password";
        }
    }

        @*$(document).ready(function() {
            debugger;
            GetRoles('@Model.ProjectId', '@Model.RoleId');
        });

    $("#ProjectId").change(function () {
        var id = $(this).val();
        GetRoles(id, 0);
    });
        function GetRoles(id, roleid) {
            debugger;
            var value = id;
            if (value != "Select") {
                $("#RoleId").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetRoles")', // we are calling json method

                    dataType: 'json',

                    data: { projectid: value, roleId: roleid },
                    // here we are get value of selected country and passing same value as inputto json method GetStates.

                    success: function(roles) {
                        debugger;
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        var items = '<option value="">Select</option>';
                        var selectedValue;
                        $.each(roles,
                            function(i, roles) {

                                if (roles.Selected) {
                                    selectedValue = roles.Value;
                                }

                                var optionHtml = "<option {selected} value='{value}'>{text}</option>";
                                optionHtml = optionHtml.replace('{value}', roles.Value);
                                optionHtml = optionHtml.replace('{text}', roles.Text);
                                optionHtml = optionHtml.replace('{selected}', (roles.Selected == true ? "selected='selected'" : ""));

                                items += optionHtml;

                            });
                        $('#RoleId').html(items);
                        $('#RoleId').val(selectedValue == undefined ? '0' : selectedValue);
                        $('#UserDropdown').slideDown();
                    },
                    error: function(ex) {
                        var items = '<option value="">Select</option>';
                        $('#RoleId').html(items);
                        $('#UserDropdown').slideUp();
                    }
                });
            } else {
                $('#UserDropdown').slideUp();
            }
        }*@

</script>

