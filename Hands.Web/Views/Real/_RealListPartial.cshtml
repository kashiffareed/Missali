
@using Hands.Common.Common
@model  Hands.ViewModels.Models.real
<div class="col-lg-12">
<!--begin::Portlet-->
<div class="m-portlet">

<div class="row" style="padding: 16px;">
    <div class="m-portlet__head-text col-md-10 pull-left titlehead">Appuser (REALTIME) Listing</div>
    <div class="col-md-2" @(HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.create.ToInt() && x.MenuId == CommonConstant.MenuList.RealTimeMonitoring.ToInt()) ? "" : "hidden")>
        @Html.ActionLink("ADD", "Create", "Real", null, new { @class = "btn btn-primary top-button test" })
    </div>
</div>
        
<div class="" style="padding: 6px;" id="divUpdate">

    @(Html.Grid(Model.RealList).Build(columns =>
{

columns.Add(c => c.FullName).Titled("FULL NAME").Filterable(true);
columns.Add(c => c.Dob).Titled("Date Of Birth").Filterable(true);
columns.Add(c => c.Username).Titled("USER NAME").Filterable(true);
columns.Add(c => c.Pwd).Titled("PASSWORD").Filterable(true);
columns.Add(c => c.ContactNumber).Titled("CONTACT NUMBER").Filterable(true);
columns.Add(c => c.Address).Titled("ADDRESS").Filterable(true);
columns.Add(c => c.FatherHusbandName).Titled("HUSBAND NAME").Filterable(true);
columns.Add(c => c.AgePerCnic).Titled("AGE PER CNIC").Filterable(true);
columns.Add(c => c.Cnic).Titled("CNIC").Filterable(true);
columns.Add(c => c.Organization).Titled("Organization").Filterable(true);
columns.Add(c => c.Designation).Titled("Designation").Filterable(true);
columns.Add(c => c.Email).Titled("Email").Filterable(true);
columns.Add(c => c.CnicValidtyEnd).Titled("CNIC VALIDITY END").Filterable(true);
columns.Add(c => c.Qualification).Titled("QUALIFICATION").Filterable(true);
//columns.Add(c => c.PopulcationCovered).Titled("POPULATION COVERED").Filterable(true);
//columns.Add(c => c.NoOfHouseHolds).Titled("NO OF HOUSE HOLDS").Filterable(true);
//columns.Add(c => c.NearbyPublicFaculty).Titled("NEAR BY PUBLIC FACULTY").Filterable(true);
//columns.Add(c => c.NearbyPrivateFaculty).Titled("NEAR BY PRIVATE FACULTY").Filterable(true);
//columns.Add(c => c.DateOfJoin).Titled("DATE OF JOIN").Filterable(true);
//columns.Add(c => c.DateOfTrain).Titled("DATE OF TRAIN").Filterable(true);
columns.Add(model => Html.ActionLink("VIEW", "View", new { id = model.AppUserId }, new { @class = "edit-button btn btn-primary top-button" })).Css("abc");

columns.Add(model => HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.edit.ToInt() && x.MenuId == CommonConstant.MenuList.RealTimeMonitoring.ToInt()) ? "<a class='edit-button btn btn-primary top-button' href='" + Url.Action("Edit", new { id = model.AppUserId }) + "'>Edit</a>" : "").Encoded(false).Css("abc");
//columns.Add(model => HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.delete.ToInt() && x.MenuId == CommonConstant.MenuList.RealTimeMonitoring.ToInt()) ? "<a class='delete-button btn btn-danger top-button deleteBtn' href='" + Url.Action("Delete", new { id = model.AppUserId}) + "'>Delete</a>" : "").Sortable(true).Encoded(false);


if (HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.delete.ToInt() && x.MenuId == CommonConstant.MenuList.CMS.ToInt()))
{
    columns.Add(model => Ajax.ActionLink("Delete", "Delete", "Real", new { id = model.AppUserId }, new AjaxOptions()
    {
        HttpMethod = "POST",
        LoadingElementId = "resultLoadingDiv",
        UpdateTargetId = "PrjDiv",
        OnBegin = "ShowProcessingMsg",
        OnComplete = "HideProcessingMsg",
        OnSuccess = "success"
    }, new { @class = "delete-button btn btn-danger top-button deleteBtn" })).Css("abc");
}

//columns.Add(model => Html.ActionLink("EDIT", "Edit", new { id = model.AppUserId }, new { @class = "edit-button btn btn-primary top-button" })).Css("abc");
///columns.Add(model => Html.ActionLink("Delete", "Edit", new { id = model.AppUserId }, new { @class = "delete-button btn btn-danger top-button" })).Css("abc");
//columns.Add(model => Ajax.ActionLink("DELETE", "Delete", "Real", new { id = model.AppUserId }, new AjaxOptions()
    @*{
        HttpMethod = "POST",
        LoadingElementId = "resultLoadingDiv",
        UpdateTargetId = "PrjDiv",
        OnBegin = "ShowProcessingMsg",
        OnComplete = "HideProcessingMsg",
        OnSuccess = "success"
    }, new { @class = "delete-button btn btn-danger top-button deleteBtn" })).Css("abc");*@
})
                   .Css("css-classes") // Overwrites all classes with the new ones
                              .AppendCss("table-hover") // Appends classes to the current ones
                                      .Pageable(pager =>
                                      {
                                          pager.PageSizes = new Dictionary<int, string>()
                                                                                                      {
                                                                                                      {0, "All"},
                                                                                                      {10, "10"},
                                                                                                      {20, "20"},
                                                                                                      {50, "50"},
                                                                                                      {100, "100"}
                                                                                                      };


                                          pager.ShowPageSizes = true;
                                          pager.PagesToDisplay = 10;
                                          pager.RowsPerPage = 10;
                                      })
                                      .WithFilterMode(GridFilterMode.FilterRow)
                                      .Empty("No data found")
                                                                                                                                .Filterable()


    )


</div>

    </div>
   
</div>


<script>
    $(document).ready(function () {
            $('#export').css("display", "block");

        </script>