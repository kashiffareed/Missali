@using Hands.Common.Common
@model  Hands.ViewModels.Models.appUser

<div class="col-lg-12">
    <!--begin::Portlet-->
    <div class="m-portlet">

        <div class="row" id="hands" style="padding: 16px;">

            <div class="m-portlet__head-text col-md-10 pull-left titlehead">Appuser (LHV) Listing</div>
            <div class="col-md-2"  @(HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.create.ToInt() && x.MenuId == CommonConstant.MenuList.LHVListing.ToInt()) ? "" : "hidden")>
                @Html.ActionLink("ADD", "Create", "AppUser", null, new { @class = "btn btn-primary top-button test" })
            </div>

        </div>
        
        <div class="" style="padding: 6px;" id="divUpdate">
                @(Html.Grid(Model.APpUSerList).Build(columns =>
            {

                columns.Add(c => c.FullName).Titled("NAME OF LHV").Filterable(true);
                columns.Add(c => c.MaritalStatus).Titled("CURRENT MARITAL STATUS").Filterable(true);
                columns.Add(c => c.FatherHusbandName).Titled("FATHER/HUSBAND NAME").Filterable(true);
                columns.Add(c => c.Dob).Titled("D.O.B").Filterable(true);
                columns.Add(c => c.AgePerCnic).Titled("AGE PER CNIC").Filterable(true);
                columns.Add(c => c.Cnic).Titled("CNIC").Filterable(true);
                columns.Add(c => c.CnicValidtyEnd).Titled("CNIC VALIDITY END").Filterable(true);
                columns.Add(c => c.ContactNumber).Titled("CONTACT NUMBER").Filterable(true);
                columns.Add(c => c.Qualification).Titled("QUALIFICATION").Filterable(true);
                columns.Add(c => c.TotalMarviAssigned).Titled("NO OF MARVI WORKER").Filterable(true);
                columns.Add(c => c.PopulcationCovered).Titled("POPULATION COVERED").Filterable(true);

                //columns.Add(c => c.Username).Titled("USER NAME").Filterable(true);
                //columns.Add(c => c.Pwd).Titled("PASSWORD").Filterable(true);

                //columns.Add(c => c.Address).Titled("ADDRESS").Filterable(true);
                //columns.Add(c => c.FatherHusbandName).Titled("Husband Name").Filterable(true);



                //columns.Add(c => c.PopulcationCovered).Titled("Populcation Covered").Filterable(true);
                //columns.Add(c => c.NoOfHouseHolds).Titled("No Of House Holds").Filterable(true);
                //columns.Add(c => c.NearbyPublicFaculty).Titled("Near by Public Faculty").Filterable(true);
                //columns.Add(c => c.NearbyPrivateFaculty).Titled("Near by Private Faculty").Filterable(true);
                //columns.Add(c => c.DateOfJoin).Titled("Date Of Join").Filterable(true);
                //columns.Add(c => c.DateOfTrain).Titled("Date Of Train").Filterable(true);

                columns.Add(model => Html.ActionLink("VIEW", "View", new { id = model.AppUserId }, new { @class = "edit-button btn btn-primary top-button" })).Css("abc");
                columns.Add(model => HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.edit.ToInt() && x.MenuId == CommonConstant.MenuList.LHVListing.ToInt()) ? "<a class='edit-button btn btn-primary top-button' href='" + Url.Action("Edit", new { id = model.AppUserId }) + "'>Edit</a>" : "").Encoded(false).Css("abc");
                //columns.Add(model => HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.delete.ToInt() && x.MenuId == CommonConstant.MenuList.LHVListing.ToInt()) ? "<a class='delete-button btn btn-danger top-button deleteBtn' href='" + Url.Action("Delete", new { id = model.AppUserId }) + "'>Delete</a>" : "").Sortable(true).Encoded(false);

                if (HandSession.Current.AccessList.Any(x => x.ProjectId == HandSession.Current.ProjectId && x.RoleId == HandSession.Current.RoleId && x.AccessLevelId == CommonConstant.RightLevelEnum.delete.ToInt() && x.MenuId == CommonConstant.MenuList.CMS.ToInt()))
                {
                    columns.Add(model => Ajax.ActionLink("Delete", "Delete", "AppUser", new { id = model.AppUserId }, new AjaxOptions()
                    {
                        HttpMethod = "POST",
                        LoadingElementId = "resultLoadingDiv",
                        UpdateTargetId = "PrjDiv",
                        OnBegin = "ShowProcessingMsg",
                        OnComplete = "HideProcessingMsg",
                        OnSuccess = "success"
                    }, new { @class = "delete-button btn btn-danger top-button deleteBtn" })).Css("abc");
                }

                ///columns.Add(model => Html.ActionLink("EDIT", "Edit", new { id = model.AppUserId }, new { @class = "edit-button btn btn-primary top-button" })).Css("abc");
                /// columns.Add(model => Ajax.ActionLink("DELETE", "Delete", "AppUser", new { id = model.AppUserId }, new AjaxOptions()
                //{
                //   HttpMethod = "POST",
                //   LoadingElementId = "resultLoadingDiv",

                //  InsertionMode = InsertionMode.Replace,
                ///  UpdateTargetId = "PrjDiv",
                // OnBegin = "ShowProcessingMsg",
                // OnComplete = "HideProcessingMsg",
                // OnSuccess = "success"
                // }, new { @class = "delete-button btn btn-danger top-button deleteBtn" })).Css("abc");
            })

                                  .Pageable(pager =>
                                  {
                                      pager.PageSizes = new Dictionary<int, string>()
                                                                                                                      {
                                                                                                          {0, "All"},
                                                                                                          {10, "10"},
                                                                                                          {20, "20"},
                                                                                                          {50, "50"},
                                                                                                          {100, "100"}
                                                                                                                      };


                                      pager.ShowPageSizes = true;
                                      pager.PagesToDisplay = 10;
                                      pager.RowsPerPage = 10;

                                  })
                                  .Css("css-classes") // Overwrites all classes with the new ones
                                  .AppendCss("table-hover") // Appends classes to the current ones
                                  .WithFilterMode(GridFilterMode.FilterRow)
                                  .Empty("No data found")
                                  .Filterable()

                )

            </div>
        </div>
    </div>


<script>
    $(document).ready(function () {
        $('#export').css("display", "block");

</script>